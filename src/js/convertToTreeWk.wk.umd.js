const d="function"==typeof Buffer,l="function"==typeof TextDecoder?new TextDecoder:void 0,b=("function"==typeof TextEncoder&&new TextEncoder,Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")),I=(d=>{let l={};return b.forEach(((d,b)=>l[d]=b)),l})(),m=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,i=String.fromCharCode.bind(String),Z="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):d=>new Uint8Array(Array.prototype.slice.call(d,0)),X=d=>d.replace(/[^A-Za-z0-9\+\/]/g,""),c=d=>{let l,I,m,i,Z="";const X=d.length%3;for(let X=0;X<d.length;){if((I=d.charCodeAt(X++))>255||(m=d.charCodeAt(X++))>255||(i=d.charCodeAt(X++))>255)throw new TypeError("invalid character found");l=I<<16|m<<8|i,Z+=b[l>>18&63]+b[l>>12&63]+b[l>>6&63]+b[63&l]}return X?Z.slice(0,X-3)+"===".substring(X):Z},y=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,W=d=>{switch(d.length){case 4:var l=((7&d.charCodeAt(0))<<18|(63&d.charCodeAt(1))<<12|(63&d.charCodeAt(2))<<6|63&d.charCodeAt(3))-65536;return i(55296+(l>>>10))+i(56320+(1023&l));case 3:return i((15&d.charCodeAt(0))<<12|(63&d.charCodeAt(1))<<6|63&d.charCodeAt(2));default:return i((31&d.charCodeAt(0))<<6|63&d.charCodeAt(1))}},p=d=>d.replace(y,W),K=d=>{if(d=d.replace(/\s+/g,""),!m.test(d))throw new TypeError("malformed base64.");d+="==".slice(2-(3&d.length));let l,b,Z,X="";for(let m=0;m<d.length;)l=I[d.charAt(m++)]<<18|I[d.charAt(m++)]<<12|(b=I[d.charAt(m++)])<<6|(Z=I[d.charAt(m++)]),X+=64===b?i(l>>16&255):64===Z?i(l>>16&255,l>>8&255):i(l>>16&255,l>>8&255,255&l);return X},C="function"==typeof atob?d=>atob(X(d)):d?d=>Buffer.from(d,"base64").toString("binary"):K,G=d?d=>Z(Buffer.from(d,"base64")):d=>Z(C(d).split("").map((d=>d.charCodeAt(0)))),H=d?d=>Buffer.from(d,"base64").toString("utf8"):l?d=>l.decode(G(d)):d=>p(C(d)),h=d=>X(d.replace(/[-_]/g,(d=>"-"==d?"+":"/"))),Y=d=>H(h(d)),V=Y;var u={};!function(d){var l=Object.prototype.hasOwnProperty,b="~";function I(){}function m(d,l,b){this.fn=d,this.context=l,this.once=b||!1}function i(d,l,I,i,Z){if("function"!=typeof I)throw new TypeError("The listener must be a function");var X=new m(I,i||d,Z),c=b?b+l:l;return d._events[c]?d._events[c].fn?d._events[c]=[d._events[c],X]:d._events[c].push(X):(d._events[c]=X,d._eventsCount++),d}function Z(d,l){0==--d._eventsCount?d._events=new I:delete d._events[l]}function X(){this._events=new I,this._eventsCount=0}Object.create&&(I.prototype=Object.create(null),(new I).__proto__||(b=!1)),X.prototype.eventNames=function(){var d,I,m=[];if(0===this._eventsCount)return m;for(I in d=this._events)l.call(d,I)&&m.push(b?I.slice(1):I);return Object.getOwnPropertySymbols?m.concat(Object.getOwnPropertySymbols(d)):m},X.prototype.listeners=function(d){var l=b?b+d:d,I=this._events[l];if(!I)return[];if(I.fn)return[I.fn];for(var m=0,i=I.length,Z=new Array(i);m<i;m++)Z[m]=I[m].fn;return Z},X.prototype.listenerCount=function(d){var l=b?b+d:d,I=this._events[l];return I?I.fn?1:I.length:0},X.prototype.emit=function(d,l,I,m,i,Z){var X=b?b+d:d;if(!this._events[X])return!1;var c,y,W=this._events[X],p=arguments.length;if(W.fn){switch(W.once&&this.removeListener(d,W.fn,void 0,!0),p){case 1:return W.fn.call(W.context),!0;case 2:return W.fn.call(W.context,l),!0;case 3:return W.fn.call(W.context,l,I),!0;case 4:return W.fn.call(W.context,l,I,m),!0;case 5:return W.fn.call(W.context,l,I,m,i),!0;case 6:return W.fn.call(W.context,l,I,m,i,Z),!0}for(y=1,c=new Array(p-1);y<p;y++)c[y-1]=arguments[y];W.fn.apply(W.context,c)}else{var K,C=W.length;for(y=0;y<C;y++)switch(W[y].once&&this.removeListener(d,W[y].fn,void 0,!0),p){case 1:W[y].fn.call(W[y].context);break;case 2:W[y].fn.call(W[y].context,l);break;case 3:W[y].fn.call(W[y].context,l,I);break;case 4:W[y].fn.call(W[y].context,l,I,m);break;default:if(!c)for(K=1,c=new Array(p-1);K<p;K++)c[K-1]=arguments[K];W[y].fn.apply(W[y].context,c)}}return!0},X.prototype.on=function(d,l,b){return i(this,d,l,b,!1)},X.prototype.once=function(d,l,b){return i(this,d,l,b,!0)},X.prototype.removeListener=function(d,l,I,m){var i=b?b+d:d;if(!this._events[i])return this;if(!l)return Z(this,i),this;var X=this._events[i];if(X.fn)X.fn!==l||m&&!X.once||I&&X.context!==I||Z(this,i);else{for(var c=0,y=[],W=X.length;c<W;c++)(X[c].fn!==l||m&&!X[c].once||I&&X[c].context!==I)&&y.push(X[c]);y.length?this._events[i]=1===y.length?y[0]:y:Z(this,i)}return this},X.prototype.removeAllListeners=function(d){var l;return d?(l=b?b+d:d,this._events[l]&&Z(this,l)):(this._events=new I,this._eventsCount=0),this},X.prototype.off=X.prototype.removeListener,X.prototype.addListener=X.prototype.on,X.prefixed=b,X.EventEmitter=X,d.exports=X}({get exports(){return u},set exports(d){u=d}});var t=u;let g;!function(){if("browser"!==("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;let d=V("");function l(){let l=new t;let b=function(d){try{let l=new Blob([d]),b=window.URL||window.webkitURL;return new Worker(b.createObjectURL(l))}catch(d){m(d)}}(d);if(!b)return m("invalid worker"),null;function I(){let d=function(){let d,l,b=new Promise((function(){d=arguments[0],l=arguments[1]}));return b.resolve=d,b.reject=l,b}(),I=function(){let d=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,l=[],b="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),I=b.length;for(let m=0;m<d;m++)l[m]=b[0|Math.random()*I];return l.join("")}(),m={mode:"call",id:I,fun:"main",input:[...arguments]};return b.postMessage(m),l.once(I,(l=>{"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function m(d){l.emit("error",d)}return b.onmessage=function(d){!function(d){let b=d,I=b.mode;"emit"!==I&&"return"!==I||("emit"===I&&l.emit(b.evName,b.msg),"return"===I&&l.emit(b.id,b))}(d.data)},b.onerror=m,function(){let d={mode:"init",type:"function",input:[...arguments]};b.postMessage(d)}([...arguments]),l.main=I,l.main=I,l.terminate=function(){b?(b.terminate(),b=void 0):m("worker has been terminated")},l}g=async function(){let d=[...arguments],b=l();return await b.main(...d).finally((()=>{b.terminate()}))}}();var J=g;export{J as default};
