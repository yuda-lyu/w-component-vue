const d="function"==typeof Buffer,l="function"==typeof TextDecoder?new TextDecoder:void 0,m=("function"==typeof TextEncoder&&new TextEncoder,Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")),Z=(d=>{let l={};return m.forEach(((d,m)=>l[d]=m)),l})(),I=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,b=String.fromCharCode.bind(String),c="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):d=>new Uint8Array(Array.prototype.slice.call(d,0)),i=d=>d.replace(/[^A-Za-z0-9\+\/]/g,""),X=d=>{let l,Z,I,b,c="";const i=d.length%3;for(let i=0;i<d.length;){if((Z=d.charCodeAt(i++))>255||(I=d.charCodeAt(i++))>255||(b=d.charCodeAt(i++))>255)throw new TypeError("invalid character found");l=Z<<16|I<<8|b,c+=m[l>>18&63]+m[l>>12&63]+m[l>>6&63]+m[63&l]}return i?c.slice(0,i-3)+"===".substring(i):c},y=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,C=d=>{switch(d.length){case 4:var l=((7&d.charCodeAt(0))<<18|(63&d.charCodeAt(1))<<12|(63&d.charCodeAt(2))<<6|63&d.charCodeAt(3))-65536;return b(55296+(l>>>10))+b(56320+(1023&l));case 3:return b((15&d.charCodeAt(0))<<12|(63&d.charCodeAt(1))<<6|63&d.charCodeAt(2));default:return b((31&d.charCodeAt(0))<<6|63&d.charCodeAt(1))}},W=d=>d.replace(y,C),p=d=>{if(d=d.replace(/\s+/g,""),!I.test(d))throw new TypeError("malformed base64.");d+="==".slice(2-(3&d.length));let l,m,c,i="";for(let I=0;I<d.length;)l=Z[d.charAt(I++)]<<18|Z[d.charAt(I++)]<<12|(m=Z[d.charAt(I++)])<<6|(c=Z[d.charAt(I++)]),i+=64===m?b(l>>16&255):64===c?b(l>>16&255,l>>8&255):b(l>>16&255,l>>8&255,255&l);return i},G="function"==typeof atob?d=>atob(i(d)):d?d=>Buffer.from(d,"base64").toString("binary"):p,K=d?d=>c(Buffer.from(d,"base64")):d=>c(G(d).split("").map((d=>d.charCodeAt(0)))),V=d?d=>Buffer.from(d,"base64").toString("utf8"):l?d=>l.decode(K(d)):d=>W(G(d)),h=d=>i(d.replace(/[-_]/g,(d=>"-"==d?"+":"/"))),o=d=>V(h(d)),u=o;var Y={};!function(d){var l=Object.prototype.hasOwnProperty,m="~";function Z(){}function I(d,l,m){this.fn=d,this.context=l,this.once=m||!1}function b(d,l,Z,b,c){if("function"!=typeof Z)throw new TypeError("The listener must be a function");var i=new I(Z,b||d,c),X=m?m+l:l;return d._events[X]?d._events[X].fn?d._events[X]=[d._events[X],i]:d._events[X].push(i):(d._events[X]=i,d._eventsCount++),d}function c(d,l){0==--d._eventsCount?d._events=new Z:delete d._events[l]}function i(){this._events=new Z,this._eventsCount=0}Object.create&&(Z.prototype=Object.create(null),(new Z).__proto__||(m=!1)),i.prototype.eventNames=function(){var d,Z,I=[];if(0===this._eventsCount)return I;for(Z in d=this._events)l.call(d,Z)&&I.push(m?Z.slice(1):Z);return Object.getOwnPropertySymbols?I.concat(Object.getOwnPropertySymbols(d)):I},i.prototype.listeners=function(d){var l=m?m+d:d,Z=this._events[l];if(!Z)return[];if(Z.fn)return[Z.fn];for(var I=0,b=Z.length,c=new Array(b);I<b;I++)c[I]=Z[I].fn;return c},i.prototype.listenerCount=function(d){var l=m?m+d:d,Z=this._events[l];return Z?Z.fn?1:Z.length:0},i.prototype.emit=function(d,l,Z,I,b,c){var i=m?m+d:d;if(!this._events[i])return!1;var X,y,C=this._events[i],W=arguments.length;if(C.fn){switch(C.once&&this.removeListener(d,C.fn,void 0,!0),W){case 1:return C.fn.call(C.context),!0;case 2:return C.fn.call(C.context,l),!0;case 3:return C.fn.call(C.context,l,Z),!0;case 4:return C.fn.call(C.context,l,Z,I),!0;case 5:return C.fn.call(C.context,l,Z,I,b),!0;case 6:return C.fn.call(C.context,l,Z,I,b,c),!0}for(y=1,X=new Array(W-1);y<W;y++)X[y-1]=arguments[y];C.fn.apply(C.context,X)}else{var p,G=C.length;for(y=0;y<G;y++)switch(C[y].once&&this.removeListener(d,C[y].fn,void 0,!0),W){case 1:C[y].fn.call(C[y].context);break;case 2:C[y].fn.call(C[y].context,l);break;case 3:C[y].fn.call(C[y].context,l,Z);break;case 4:C[y].fn.call(C[y].context,l,Z,I);break;default:if(!X)for(p=1,X=new Array(W-1);p<W;p++)X[p-1]=arguments[p];C[y].fn.apply(C[y].context,X)}}return!0},i.prototype.on=function(d,l,m){return b(this,d,l,m,!1)},i.prototype.once=function(d,l,m){return b(this,d,l,m,!0)},i.prototype.removeListener=function(d,l,Z,I){var b=m?m+d:d;if(!this._events[b])return this;if(!l)return c(this,b),this;var i=this._events[b];if(i.fn)i.fn!==l||I&&!i.once||Z&&i.context!==Z||c(this,b);else{for(var X=0,y=[],C=i.length;X<C;X++)(i[X].fn!==l||I&&!i[X].once||Z&&i[X].context!==Z)&&y.push(i[X]);y.length?this._events[b]=1===y.length?y[0]:y:c(this,b)}return this},i.prototype.removeAllListeners=function(d){var l;return d?(l=m?m+d:d,this._events[l]&&c(this,l)):(this._events=new Z,this._eventsCount=0),this},i.prototype.off=i.prototype.removeListener,i.prototype.addListener=i.prototype.on,i.prefixed=m,i.EventEmitter=i,d.exports=i}({get exports(){return Y},set exports(d){Y=d}});var H=Y;let n;!function(){if("browser"!==("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;let d=u("CgoKInVzZSBzdHJpY3QiO3ZhciB0PUFycmF5LmlzQXJyYXkscj0ib2JqZWN0Ij09dHlwZW9mIGdsb2JhbCYmZ2xvYmFsJiZnbG9iYWwuT2JqZWN0PT09T2JqZWN0JiZnbG9iYWwsZT0ib2JqZWN0Ij09dHlwZW9mIHNlbGYmJnNlbGYmJnNlbGYuT2JqZWN0PT09T2JqZWN0JiZzZWxmLG49cnx8ZXx8RnVuY3Rpb24oInJldHVybiB0aGlzIikoKSxvPW4uU3ltYm9sLHU9T2JqZWN0LnByb3RvdHlwZSxpPXUuaGFzT3duUHJvcGVydHksYz11LnRvU3RyaW5nLGE9bz9vLnRvU3RyaW5nVGFnOnZvaWQgMDt2YXIgZj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO3ZhciBsPSJbb2JqZWN0IE51bGxdIixzPSJbb2JqZWN0IFVuZGVmaW5lZF0iLHA9bz9vLnRvU3RyaW5nVGFnOnZvaWQgMDtmdW5jdGlvbiBiKHQpe3JldHVybiBudWxsPT10P3ZvaWQgMD09PXQ/czpsOnAmJnAgaW4gT2JqZWN0KHQpP2Z1bmN0aW9uKHQpe3ZhciByPWkuY2FsbCh0LGEpLGU9dFthXTt0cnl7dFthXT12b2lkIDA7dmFyIG49ITB9Y2F0Y2godCl7fXZhciBvPWMuY2FsbCh0KTtyZXR1cm4gbiYmKHI/dFthXT1lOmRlbGV0ZSB0W2FdKSxvfSh0KTpmdW5jdGlvbih0KXtyZXR1cm4gZi5jYWxsKHQpfSh0KX1mdW5jdGlvbiB2KHQpe3JldHVybiBudWxsIT10JiYib2JqZWN0Ij09dHlwZW9mIHR9dmFyIHk9IltvYmplY3QgU3ltYm9sXSI7ZnVuY3Rpb24gaCh0KXtyZXR1cm4ic3ltYm9sIj09dHlwZW9mIHR8fHYodCkmJmIodCk9PXl9dmFyIGQ9L1wufFxbKD86W15bXF1dKnwoWyInXSkoPzooPyFcMSlbXlxcXXxcXC4pKj9cMSlcXS8saj0vXlx3KiQvO2Z1bmN0aW9uIGcocixlKXtpZih0KHIpKXJldHVybiExO3ZhciBuPXR5cGVvZiByO3JldHVybiEoIm51bWJlciIhPW4mJiJzeW1ib2wiIT1uJiYiYm9vbGVhbiIhPW4mJm51bGwhPXImJiFoKHIpKXx8KGoudGVzdChyKXx8IWQudGVzdChyKXx8bnVsbCE9ZSYmciBpbiBPYmplY3QoZSkpfWZ1bmN0aW9uIF8odCl7dmFyIHI9dHlwZW9mIHQ7cmV0dXJuIG51bGwhPXQmJigib2JqZWN0Ij09cnx8ImZ1bmN0aW9uIj09cil9dmFyIE89IltvYmplY3QgQXN5bmNGdW5jdGlvbl0iLG09IltvYmplY3QgRnVuY3Rpb25dIix3PSJbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSIsQT0iW29iamVjdCBQcm94eV0iO2Z1bmN0aW9uIFModCl7aWYoIV8odCkpcmV0dXJuITE7dmFyIHI9Yih0KTtyZXR1cm4gcj09bXx8cj09d3x8cj09T3x8cj09QX12YXIgeCxQPW5bIl9fY29yZS1qc19zaGFyZWRfXyJdLHo9KHg9L1teLl0rJC8uZXhlYyhQJiZQLmtleXMmJlAua2V5cy5JRV9QUk9UT3x8IiIpKT8iU3ltYm9sKHNyYylfMS4iK3g6IiI7dmFyIEU9RnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO2Z1bmN0aW9uIEkodCl7aWYobnVsbCE9dCl7dHJ5e3JldHVybiBFLmNhbGwodCl9Y2F0Y2godCl7fXRyeXtyZXR1cm4gdCsiIn1jYXRjaCh0KXt9fXJldHVybiIifXZhciBOPS9eXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXSQvLFQ9RnVuY3Rpb24ucHJvdG90eXBlLCQ9T2JqZWN0LnByb3RvdHlwZSxrPVQudG9TdHJpbmcsQz0kLmhhc093blByb3BlcnR5LEY9UmVnRXhwKCJeIitrLmNhbGwoQykucmVwbGFjZSgvW1xcXiQuKis/KClbXF17fXxdL2csIlxcJCYiKS5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcKCl8IGZvciAuKz8oPz1cXFxdKS9nLCIkMS4qPyIpKyIkIik7ZnVuY3Rpb24gTSh0KXtyZXR1cm4hKCFfKHQpfHwocj10LHomJnogaW4gcikpJiYoUyh0KT9GOk4pLnRlc3QoSSh0KSk7dmFyIHJ9ZnVuY3Rpb24gVSh0LHIpe3ZhciBlPWZ1bmN0aW9uKHQscil7cmV0dXJuIG51bGw9PXQ/dm9pZCAwOnRbcl19KHQscik7cmV0dXJuIE0oZSk/ZTp2b2lkIDB9dmFyIEQ9VShPYmplY3QsImNyZWF0ZSIpO3ZhciBCPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dmFyIFI9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBMKHQpe3ZhciByPS0xLGU9bnVsbD09dD8wOnQubGVuZ3RoO2Zvcih0aGlzLmNsZWFyKCk7KytyPGU7KXt2YXIgbj10W3JdO3RoaXMuc2V0KG5bMF0sblsxXSl9fWZ1bmN0aW9uIFYodCxyKXtyZXR1cm4gdD09PXJ8fHQhPXQmJnIhPXJ9ZnVuY3Rpb24gSyh0LHIpe2Zvcih2YXIgZT10Lmxlbmd0aDtlLS07KWlmKFYodFtlXVswXSxyKSlyZXR1cm4gZTtyZXR1cm4tMX1MLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuX19kYXRhX189RD9EKG51bGwpOnt9LHRoaXMuc2l6ZT0wfSxMLnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24odCl7dmFyIHI9dGhpcy5oYXModCkmJmRlbGV0ZSB0aGlzLl9fZGF0YV9fW3RdO3JldHVybiB0aGlzLnNpemUtPXI/MTowLHJ9LEwucHJvdG90eXBlLmdldD1mdW5jdGlvbih0KXt2YXIgcj10aGlzLl9fZGF0YV9fO2lmKEQpe3ZhciBlPXJbdF07cmV0dXJuIl9fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18iPT09ZT92b2lkIDA6ZX1yZXR1cm4gQi5jYWxsKHIsdCk/clt0XTp2b2lkIDB9LEwucHJvdG90eXBlLmhhcz1mdW5jdGlvbih0KXt2YXIgcj10aGlzLl9fZGF0YV9fO3JldHVybiBEP3ZvaWQgMCE9PXJbdF06Ui5jYWxsKHIsdCl9LEwucHJvdG90eXBlLnNldD1mdW5jdGlvbih0LHIpe3ZhciBlPXRoaXMuX19kYXRhX187cmV0dXJuIHRoaXMuc2l6ZSs9dGhpcy5oYXModCk/MDoxLGVbdF09RCYmdm9pZCAwPT09cj8iX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyI6cix0aGlzfTt2YXIgVz1BcnJheS5wcm90b3R5cGUuc3BsaWNlO2Z1bmN0aW9uIHEodCl7dmFyIHI9LTEsZT1udWxsPT10PzA6dC5sZW5ndGg7Zm9yKHRoaXMuY2xlYXIoKTsrK3I8ZTspe3ZhciBuPXRbcl07dGhpcy5zZXQoblswXSxuWzFdKX19cS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLl9fZGF0YV9fPVtdLHRoaXMuc2l6ZT0wfSxxLnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24odCl7dmFyIHI9dGhpcy5fX2RhdGFfXyxlPUsocix0KTtyZXR1cm4hKGU8MCkmJihlPT1yLmxlbmd0aC0xP3IucG9wKCk6Vy5jYWxsKHIsZSwxKSwtLXRoaXMuc2l6ZSwhMCl9LHEucHJvdG90eXBlLmdldD1mdW5jdGlvbih0KXt2YXIgcj10aGlzLl9fZGF0YV9fLGU9SyhyLHQpO3JldHVybiBlPDA/dm9pZCAwOnJbZV1bMV19LHEucHJvdG90eXBlLmhhcz1mdW5jdGlvbih0KXtyZXR1cm4gSyh0aGlzLl9fZGF0YV9fLHQpPi0xfSxxLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24odCxyKXt2YXIgZT10aGlzLl9fZGF0YV9fLG49SyhlLHQpO3JldHVybiBuPDA/KCsrdGhpcy5zaXplLGUucHVzaChbdCxyXSkpOmVbbl1bMV09cix0aGlzfTt2YXIgRz1VKG4sIk1hcCIpO2Z1bmN0aW9uIEgodCxyKXt2YXIgZSxuLG89dC5fX2RhdGFfXztyZXR1cm4oInN0cmluZyI9PShuPXR5cGVvZihlPXIpKXx8Im51bWJlciI9PW58fCJzeW1ib2wiPT1ufHwiYm9vbGVhbiI9PW4/Il9fcHJvdG9fXyIhPT1lOm51bGw9PT1lKT9vWyJzdHJpbmciPT10eXBlb2Ygcj8ic3RyaW5nIjoiaGFzaCJdOm8ubWFwfWZ1bmN0aW9uIEoodCl7dmFyIHI9LTEsZT1udWxsPT10PzA6dC5sZW5ndGg7Zm9yKHRoaXMuY2xlYXIoKTsrK3I8ZTspe3ZhciBuPXRbcl07dGhpcy5zZXQoblswXSxuWzFdKX19Si5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLnNpemU9MCx0aGlzLl9fZGF0YV9fPXtoYXNoOm5ldyBMLG1hcDpuZXcoR3x8cSksc3RyaW5nOm5ldyBMfX0sSi5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKHQpe3ZhciByPUgodGhpcyx0KS5kZWxldGUodCk7cmV0dXJuIHRoaXMuc2l6ZS09cj8xOjAscn0sSi5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKHQpe3JldHVybiBIKHRoaXMsdCkuZ2V0KHQpfSxKLnByb3RvdHlwZS5oYXM9ZnVuY3Rpb24odCl7cmV0dXJuIEgodGhpcyx0KS5oYXModCl9LEoucHJvdG90eXBlLnNldD1mdW5jdGlvbih0LHIpe3ZhciBlPUgodGhpcyx0KSxuPWUuc2l6ZTtyZXR1cm4gZS5zZXQodCxyKSx0aGlzLnNpemUrPWUuc2l6ZT09bj8wOjEsdGhpc307dmFyIFE9IkV4cGVjdGVkIGEgZnVuY3Rpb24iO2Z1bmN0aW9uIFgodCxyKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgdHx8bnVsbCE9ciYmImZ1bmN0aW9uIiE9dHlwZW9mIHIpdGhyb3cgbmV3IFR5cGVFcnJvcihRKTt2YXIgZT1mdW5jdGlvbigpe3ZhciBuPWFyZ3VtZW50cyxvPXI/ci5hcHBseSh0aGlzLG4pOm5bMF0sdT1lLmNhY2hlO2lmKHUuaGFzKG8pKXJldHVybiB1LmdldChvKTt2YXIgaT10LmFwcGx5KHRoaXMsbik7cmV0dXJuIGUuY2FjaGU9dS5zZXQobyxpKXx8dSxpfTtyZXR1cm4gZS5jYWNoZT1uZXcoWC5DYWNoZXx8SiksZX1YLkNhY2hlPUo7dmFyIFksWix0dCxydD0vW14uW1xdXSt8XFsoPzooLT9cZCsoPzpcLlxkKyk/KXwoWyInXSkoKD86KD8hXDIpW15cXF18XFwuKSo/KVwyKVxdfCg/PSg/OlwufFxbXF0pKD86XC58XFtcXXwkKSkvZyxldD0vXFwoXFwpPy9nLG50PShZPWZ1bmN0aW9uKHQpe3ZhciByPVtdO3JldHVybiA0Nj09PXQuY2hhckNvZGVBdCgwKSYmci5wdXNoKCIiKSx0LnJlcGxhY2UocnQsKGZ1bmN0aW9uKHQsZSxuLG8pe3IucHVzaChuP28ucmVwbGFjZShldCwiJDEiKTplfHx0KX0pKSxyfSxaPVgoWSwoZnVuY3Rpb24odCl7cmV0dXJuIDUwMD09PXR0LnNpemUmJnR0LmNsZWFyKCksdH0pKSx0dD1aLmNhY2hlLFopLG90PW50O2Z1bmN0aW9uIHV0KHQscil7Zm9yKHZhciBlPS0xLG49bnVsbD09dD8wOnQubGVuZ3RoLG89QXJyYXkobik7KytlPG47KW9bZV09cih0W2VdLGUsdCk7cmV0dXJuIG99dmFyIGl0PTEvMCxjdD1vP28ucHJvdG90eXBlOnZvaWQgMCxhdD1jdD9jdC50b1N0cmluZzp2b2lkIDA7ZnVuY3Rpb24gZnQocil7aWYoInN0cmluZyI9PXR5cGVvZiByKXJldHVybiByO2lmKHQocikpcmV0dXJuIHV0KHIsZnQpKyIiO2lmKGgocikpcmV0dXJuIGF0P2F0LmNhbGwocik6IiI7dmFyIGU9cisiIjtyZXR1cm4iMCI9PWUmJjEvcj09LWl0PyItMCI6ZX1mdW5jdGlvbiBsdChyLGUpe3JldHVybiB0KHIpP3I6ZyhyLGUpP1tyXTpvdChmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dD8iIjpmdCh0KX0ocikpfXZhciBzdD0xLzA7ZnVuY3Rpb24gcHQodCl7aWYoInN0cmluZyI9PXR5cGVvZiB0fHxoKHQpKXJldHVybiB0O3ZhciByPXQrIiI7cmV0dXJuIjAiPT1yJiYxL3Q9PS1zdD8iLTAiOnJ9ZnVuY3Rpb24gYnQodCxyKXtmb3IodmFyIGU9MCxuPShyPWx0KHIsdCkpLmxlbmd0aDtudWxsIT10JiZlPG47KXQ9dFtwdChyW2UrK10pXTtyZXR1cm4gZSYmZT09bj90OnZvaWQgMH1mdW5jdGlvbiB2dCh0LHIsZSl7dmFyIG49bnVsbD09dD92b2lkIDA6YnQodCxyKTtyZXR1cm4gdm9pZCAwPT09bj9lOm59ZnVuY3Rpb24geXQodCl7cmV0dXJuIltvYmplY3QgU3RyaW5nXSI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCl9ZnVuY3Rpb24gaHQodCl7cmV0dXJuISgheXQodCl8fCIiPT09dCl9ZnVuY3Rpb24gZHQodCl7cmV0dXJuIltvYmplY3QgT2JqZWN0XSI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCl9ZnVuY3Rpb24ganQodCl7aWYoZHQodCkpe2ZvcihsZXQgciBpbiB0KXJldHVybiEwO3JldHVybiExfXJldHVybiExfWZ1bmN0aW9uIGd0KHQpe3JldHVybiJbb2JqZWN0IEFycmF5XSI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCl9ZnVuY3Rpb24gX3QodCl7cmV0dXJuIHQhPXR9ZnVuY3Rpb24gT3QodCl7cmV0dXJuISFmdW5jdGlvbih0KXtyZXR1cm4iW29iamVjdCBVbmRlZmluZWRdIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX0odCl8fCghIWZ1bmN0aW9uKHQpe3JldHVybiJbb2JqZWN0IE51bGxdIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX0odCl8fCghIWZ1bmN0aW9uKHQpe2lmKGR0KHQpKXtmb3IobGV0IHIgaW4gdClyZXR1cm4hMTtyZXR1cm4hMH1yZXR1cm4hMX0odCl8fCghIWZ1bmN0aW9uKHQpe3JldHVybiEoIXl0KHQpfHwiIiE9PXQpfSh0KXx8KCEhZnVuY3Rpb24odCl7cmV0dXJuISFndCh0KSYmMD09PXQubGVuZ3RofSh0KXx8ISFfdCh0KSkpKSl9ZnVuY3Rpb24gbXQodCl7cmV0dXJuISFndCh0KSYmKDAhPT10Lmxlbmd0aCYmKDEhPT10Lmxlbmd0aHx8IU90KHRbMF0pKSl9dmFyIHd0PSJbb2JqZWN0IEJvb2xlYW5dIjtmdW5jdGlvbiBBdCh0KXtyZXR1cm4hMD09PShyPXQpfHwhMT09PXJ8fHYocikmJmIocik9PXd0O3ZhciByfWZ1bmN0aW9uIFN0KHQpe3ZhciByPXRoaXMuX19kYXRhX189bmV3IHEodCk7dGhpcy5zaXplPXIuc2l6ZX1TdC5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLl9fZGF0YV9fPW5ldyBxLHRoaXMuc2l6ZT0wfSxTdC5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKHQpe3ZhciByPXRoaXMuX19kYXRhX18sZT1yLmRlbGV0ZSh0KTtyZXR1cm4gdGhpcy5zaXplPXIuc2l6ZSxlfSxTdC5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9fZGF0YV9fLmdldCh0KX0sU3QucHJvdG90eXBlLmhhcz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModCl9LFN0LnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24odCxyKXt2YXIgZT10aGlzLl9fZGF0YV9fO2lmKGUgaW5zdGFuY2VvZiBxKXt2YXIgbj1lLl9fZGF0YV9fO2lmKCFHfHxuLmxlbmd0aDwxOTkpcmV0dXJuIG4ucHVzaChbdCxyXSksdGhpcy5zaXplPSsrZS5zaXplLHRoaXM7ZT10aGlzLl9fZGF0YV9fPW5ldyBKKG4pfXJldHVybiBlLnNldCh0LHIpLHRoaXMuc2l6ZT1lLnNpemUsdGhpc307ZnVuY3Rpb24geHQodCl7dmFyIHI9LTEsZT1udWxsPT10PzA6dC5sZW5ndGg7Zm9yKHRoaXMuX19kYXRhX189bmV3IEo7KytyPGU7KXRoaXMuYWRkKHRbcl0pfWZ1bmN0aW9uIFB0KHQscil7Zm9yKHZhciBlPS0xLG49bnVsbD09dD8wOnQubGVuZ3RoOysrZTxuOylpZihyKHRbZV0sZSx0KSlyZXR1cm4hMDtyZXR1cm4hMX1mdW5jdGlvbiB6dCh0LHIpe3JldHVybiB0LmhhcyhyKX14dC5wcm90b3R5cGUuYWRkPXh0LnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9fZGF0YV9fLnNldCh0LCJfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fIiksdGhpc30seHQucHJvdG90eXBlLmhhcz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModCl9O3ZhciBFdD0xLEl0PTI7ZnVuY3Rpb24gTnQodCxyLGUsbixvLHUpe3ZhciBpPWUmRXQsYz10Lmxlbmd0aCxhPXIubGVuZ3RoO2lmKGMhPWEmJiEoaSYmYT5jKSlyZXR1cm4hMTt2YXIgZj11LmdldCh0KSxsPXUuZ2V0KHIpO2lmKGYmJmwpcmV0dXJuIGY9PXImJmw9PXQ7dmFyIHM9LTEscD0hMCxiPWUmSXQ/bmV3IHh0OnZvaWQgMDtmb3IodS5zZXQodCxyKSx1LnNldChyLHQpOysrczxjOyl7dmFyIHY9dFtzXSx5PXJbc107aWYobil2YXIgaD1pP24oeSx2LHMscix0LHUpOm4odix5LHMsdCxyLHUpO2lmKHZvaWQgMCE9PWgpe2lmKGgpY29udGludWU7cD0hMTticmVha31pZihiKXtpZighUHQociwoZnVuY3Rpb24odCxyKXtpZighenQoYixyKSYmKHY9PT10fHxvKHYsdCxlLG4sdSkpKXJldHVybiBiLnB1c2gocil9KSkpe3A9ITE7YnJlYWt9fWVsc2UgaWYodiE9PXkmJiFvKHYseSxlLG4sdSkpe3A9ITE7YnJlYWt9fXJldHVybiB1LmRlbGV0ZSh0KSx1LmRlbGV0ZShyKSxwfXZhciBUdD1uLlVpbnQ4QXJyYXk7ZnVuY3Rpb24gJHQodCl7dmFyIHI9LTEsZT1BcnJheSh0LnNpemUpO3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQsbil7ZVsrK3JdPVtuLHRdfSkpLGV9ZnVuY3Rpb24ga3QodCl7dmFyIHI9LTEsZT1BcnJheSh0LnNpemUpO3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2VbKytyXT10fSkpLGV9dmFyIEN0PTEsRnQ9MixNdD0iW29iamVjdCBCb29sZWFuXSIsVXQ9IltvYmplY3QgRGF0ZV0iLER0PSJbb2JqZWN0IEVycm9yXSIsQnQ9IltvYmplY3QgTWFwXSIsUnQ9IltvYmplY3QgTnVtYmVyXSIsTHQ9IltvYmplY3QgUmVnRXhwXSIsVnQ9IltvYmplY3QgU2V0XSIsS3Q9IltvYmplY3QgU3RyaW5nXSIsV3Q9IltvYmplY3QgU3ltYm9sXSIscXQ9IltvYmplY3QgQXJyYXlCdWZmZXJdIixHdD0iW29iamVjdCBEYXRhVmlld10iLEh0PW8/by5wcm90b3R5cGU6dm9pZCAwLEp0PUh0P0h0LnZhbHVlT2Y6dm9pZCAwO2Z1bmN0aW9uIFF0KHQscil7Zm9yKHZhciBlPS0xLG49ci5sZW5ndGgsbz10Lmxlbmd0aDsrK2U8bjspdFtvK2VdPXJbZV07cmV0dXJuIHR9ZnVuY3Rpb24gWHQocixlLG4pe3ZhciBvPWUocik7cmV0dXJuIHQocik/bzpRdChvLG4ocikpfWZ1bmN0aW9uIFl0KCl7cmV0dXJuW119dmFyIFp0PU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUsdHI9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxycj10cj9mdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dD9bXToodD1PYmplY3QodCksZnVuY3Rpb24odCxyKXtmb3IodmFyIGU9LTEsbj1udWxsPT10PzA6dC5sZW5ndGgsbz0wLHU9W107KytlPG47KXt2YXIgaT10W2VdO3IoaSxlLHQpJiYodVtvKytdPWkpfXJldHVybiB1fSh0cih0KSwoZnVuY3Rpb24ocil7cmV0dXJuIFp0LmNhbGwodCxyKX0pKSl9Oll0LGVyPXJyO2Z1bmN0aW9uIG5yKHQpe3JldHVybiB2KHQpJiYiW29iamVjdCBBcmd1bWVudHNdIj09Yih0KX12YXIgb3I9T2JqZWN0LnByb3RvdHlwZSx1cj1vci5oYXNPd25Qcm9wZXJ0eSxpcj1vci5wcm9wZXJ0eUlzRW51bWVyYWJsZSxjcj1ucihmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHN9KCkpP25yOmZ1bmN0aW9uKHQpe3JldHVybiB2KHQpJiZ1ci5jYWxsKHQsImNhbGxlZSIpJiYhaXIuY2FsbCh0LCJjYWxsZWUiKX07dmFyIGFyPSJvYmplY3QiPT10eXBlb2YgZXhwb3J0cyYmZXhwb3J0cyYmIWV4cG9ydHMubm9kZVR5cGUmJmV4cG9ydHMsZnI9YXImJiJvYmplY3QiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUmJiFtb2R1bGUubm9kZVR5cGUmJm1vZHVsZSxscj1mciYmZnIuZXhwb3J0cz09PWFyP24uQnVmZmVyOnZvaWQgMCxzcj0obHI/bHIuaXNCdWZmZXI6dm9pZCAwKXx8ZnVuY3Rpb24oKXtyZXR1cm4hMX0scHI9OTAwNzE5OTI1NDc0MDk5MSxicj0vXig/OjB8WzEtOV1cZCopJC87ZnVuY3Rpb24gdnIodCxyKXt2YXIgZT10eXBlb2YgdDtyZXR1cm4hIShyPW51bGw9PXI/cHI6cikmJigibnVtYmVyIj09ZXx8InN5bWJvbCIhPWUmJmJyLnRlc3QodCkpJiZ0Pi0xJiZ0JTE9PTAmJnQ8cn12YXIgeXI9OTAwNzE5OTI1NDc0MDk5MTtmdW5jdGlvbiBocih0KXtyZXR1cm4ibnVtYmVyIj09dHlwZW9mIHQmJnQ+LTEmJnQlMT09MCYmdDw9eXJ9dmFyIGRyPXt9O2Z1bmN0aW9uIGpyKHQpe3JldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gdChyKX19ZHJbIltvYmplY3QgRmxvYXQzMkFycmF5XSJdPWRyWyJbb2JqZWN0IEZsb2F0NjRBcnJheV0iXT1kclsiW29iamVjdCBJbnQ4QXJyYXldIl09ZHJbIltvYmplY3QgSW50MTZBcnJheV0iXT1kclsiW29iamVjdCBJbnQzMkFycmF5XSJdPWRyWyJbb2JqZWN0IFVpbnQ4QXJyYXldIl09ZHJbIltvYmplY3QgVWludDhDbGFtcGVkQXJyYXldIl09ZHJbIltvYmplY3QgVWludDE2QXJyYXldIl09ZHJbIltvYmplY3QgVWludDMyQXJyYXldIl09ITAsZHJbIltvYmplY3QgQXJndW1lbnRzXSJdPWRyWyJbb2JqZWN0IEFycmF5XSJdPWRyWyJbb2JqZWN0IEFycmF5QnVmZmVyXSJdPWRyWyJbb2JqZWN0IEJvb2xlYW5dIl09ZHJbIltvYmplY3QgRGF0YVZpZXddIl09ZHJbIltvYmplY3QgRGF0ZV0iXT1kclsiW29iamVjdCBFcnJvcl0iXT1kclsiW29iamVjdCBGdW5jdGlvbl0iXT1kclsiW29iamVjdCBNYXBdIl09ZHJbIltvYmplY3QgTnVtYmVyXSJdPWRyWyJbb2JqZWN0IE9iamVjdF0iXT1kclsiW29iamVjdCBSZWdFeHBdIl09ZHJbIltvYmplY3QgU2V0XSJdPWRyWyJbb2JqZWN0IFN0cmluZ10iXT1kclsiW29iamVjdCBXZWFrTWFwXSJdPSExO3ZhciBncj0ib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHMmJmV4cG9ydHMmJiFleHBvcnRzLm5vZGVUeXBlJiZleHBvcnRzLF9yPWdyJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZSYmbW9kdWxlJiYhbW9kdWxlLm5vZGVUeXBlJiZtb2R1bGUsT3I9X3ImJl9yLmV4cG9ydHM9PT1nciYmci5wcm9jZXNzLG1yPWZ1bmN0aW9uKCl7dHJ5e3ZhciB0PV9yJiZfci5yZXF1aXJlJiZfci5yZXF1aXJlKCJ1dGlsIikudHlwZXM7cmV0dXJuIHR8fE9yJiZPci5iaW5kaW5nJiZPci5iaW5kaW5nKCJ1dGlsIil9Y2F0Y2godCl7fX0oKSx3cj1tciYmbXIuaXNUeXBlZEFycmF5LEFyPXdyP2pyKHdyKTpmdW5jdGlvbih0KXtyZXR1cm4gdih0KSYmaHIodC5sZW5ndGgpJiYhIWRyW2IodCldfSxTcj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIHhyKHIsZSl7dmFyIG49dChyKSxvPSFuJiZjcihyKSx1PSFuJiYhbyYmc3IociksaT0hbiYmIW8mJiF1JiZBcihyKSxjPW58fG98fHV8fGksYT1jP2Z1bmN0aW9uKHQscil7Zm9yKHZhciBlPS0xLG49QXJyYXkodCk7KytlPHQ7KW5bZV09cihlKTtyZXR1cm4gbn0oci5sZW5ndGgsU3RyaW5nKTpbXSxmPWEubGVuZ3RoO2Zvcih2YXIgbCBpbiByKSFlJiYhU3IuY2FsbChyLGwpfHxjJiYoImxlbmd0aCI9PWx8fHUmJigib2Zmc2V0Ij09bHx8InBhcmVudCI9PWwpfHxpJiYoImJ1ZmZlciI9PWx8fCJieXRlTGVuZ3RoIj09bHx8ImJ5dGVPZmZzZXQiPT1sKXx8dnIobCxmKSl8fGEucHVzaChsKTtyZXR1cm4gYX12YXIgUHI9T2JqZWN0LnByb3RvdHlwZTtmdW5jdGlvbiB6cih0KXt2YXIgcj10JiZ0LmNvbnN0cnVjdG9yO3JldHVybiB0PT09KCJmdW5jdGlvbiI9PXR5cGVvZiByJiZyLnByb3RvdHlwZXx8UHIpfWZ1bmN0aW9uIEVyKHQscil7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiB0KHIoZSkpfX12YXIgSXI9RXIoT2JqZWN0LmtleXMsT2JqZWN0KSxOcj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIFRyKHQpe2lmKCF6cih0KSlyZXR1cm4gSXIodCk7dmFyIHI9W107Zm9yKHZhciBlIGluIE9iamVjdCh0KSlOci5jYWxsKHQsZSkmJiJjb25zdHJ1Y3RvciIhPWUmJnIucHVzaChlKTtyZXR1cm4gcn1mdW5jdGlvbiAkcih0KXtyZXR1cm4gbnVsbCE9dCYmaHIodC5sZW5ndGgpJiYhUyh0KX1mdW5jdGlvbiBrcih0KXtyZXR1cm4gJHIodCk/eHIodCk6VHIodCl9ZnVuY3Rpb24gQ3IodCl7cmV0dXJuIFh0KHQsa3IsZXIpfXZhciBGcj0xLE1yPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dmFyIFVyPVUobiwiRGF0YVZpZXciKSxEcj1VKG4sIlByb21pc2UiKSxCcj1VKG4sIlNldCIpLFJyPVUobiwiV2Vha01hcCIpLExyPSJbb2JqZWN0IE1hcF0iLFZyPSJbb2JqZWN0IFByb21pc2VdIixLcj0iW29iamVjdCBTZXRdIixXcj0iW29iamVjdCBXZWFrTWFwXSIscXI9IltvYmplY3QgRGF0YVZpZXddIixHcj1JKFVyKSxIcj1JKEcpLEpyPUkoRHIpLFFyPUkoQnIpLFhyPUkoUnIpLFlyPWI7KFVyJiZZcihuZXcgVXIobmV3IEFycmF5QnVmZmVyKDEpKSkhPXFyfHxHJiZZcihuZXcgRykhPUxyfHxEciYmWXIoRHIucmVzb2x2ZSgpKSE9VnJ8fEJyJiZZcihuZXcgQnIpIT1Lcnx8UnImJllyKG5ldyBScikhPVdyKSYmKFlyPWZ1bmN0aW9uKHQpe3ZhciByPWIodCksZT0iW29iamVjdCBPYmplY3RdIj09cj90LmNvbnN0cnVjdG9yOnZvaWQgMCxuPWU/SShlKToiIjtpZihuKXN3aXRjaChuKXtjYXNlIEdyOnJldHVybiBxcjtjYXNlIEhyOnJldHVybiBMcjtjYXNlIEpyOnJldHVybiBWcjtjYXNlIFFyOnJldHVybiBLcjtjYXNlIFhyOnJldHVybiBXcn1yZXR1cm4gcn0pO3ZhciBacj1Zcix0ZT0xLHJlPSJbb2JqZWN0IEFyZ3VtZW50c10iLGVlPSJbb2JqZWN0IEFycmF5XSIsbmU9IltvYmplY3QgT2JqZWN0XSIsb2U9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiB1ZShyLGUsbixvLHUsaSl7dmFyIGM9dChyKSxhPXQoZSksZj1jP2VlOlpyKHIpLGw9YT9lZTpacihlKSxzPShmPWY9PXJlP25lOmYpPT1uZSxwPShsPWw9PXJlP25lOmwpPT1uZSxiPWY9PWw7aWYoYiYmc3Iocikpe2lmKCFzcihlKSlyZXR1cm4hMTtjPSEwLHM9ITF9aWYoYiYmIXMpcmV0dXJuIGl8fChpPW5ldyBTdCksY3x8QXIocik/TnQocixlLG4sbyx1LGkpOmZ1bmN0aW9uKHQscixlLG4sbyx1LGkpe3N3aXRjaChlKXtjYXNlIEd0OmlmKHQuYnl0ZUxlbmd0aCE9ci5ieXRlTGVuZ3RofHx0LmJ5dGVPZmZzZXQhPXIuYnl0ZU9mZnNldClyZXR1cm4hMTt0PXQuYnVmZmVyLHI9ci5idWZmZXI7Y2FzZSBxdDpyZXR1cm4hKHQuYnl0ZUxlbmd0aCE9ci5ieXRlTGVuZ3RofHwhdShuZXcgVHQodCksbmV3IFR0KHIpKSk7Y2FzZSBNdDpjYXNlIFV0OmNhc2UgUnQ6cmV0dXJuIFYoK3QsK3IpO2Nhc2UgRHQ6cmV0dXJuIHQubmFtZT09ci5uYW1lJiZ0Lm1lc3NhZ2U9PXIubWVzc2FnZTtjYXNlIEx0OmNhc2UgS3Q6cmV0dXJuIHQ9PXIrIiI7Y2FzZSBCdDp2YXIgYz0kdDtjYXNlIFZ0OnZhciBhPW4mQ3Q7aWYoY3x8KGM9a3QpLHQuc2l6ZSE9ci5zaXplJiYhYSlyZXR1cm4hMTt2YXIgZj1pLmdldCh0KTtpZihmKXJldHVybiBmPT1yO258PUZ0LGkuc2V0KHQscik7dmFyIGw9TnQoYyh0KSxjKHIpLG4sbyx1LGkpO3JldHVybiBpLmRlbGV0ZSh0KSxsO2Nhc2UgV3Q6aWYoSnQpcmV0dXJuIEp0LmNhbGwodCk9PUp0LmNhbGwocil9cmV0dXJuITF9KHIsZSxmLG4sbyx1LGkpO2lmKCEobiZ0ZSkpe3ZhciB2PXMmJm9lLmNhbGwociwiX193cmFwcGVkX18iKSx5PXAmJm9lLmNhbGwoZSwiX193cmFwcGVkX18iKTtpZih2fHx5KXt2YXIgaD12P3IudmFsdWUoKTpyLGQ9eT9lLnZhbHVlKCk6ZTtyZXR1cm4gaXx8KGk9bmV3IFN0KSx1KGgsZCxuLG8saSl9fXJldHVybiEhYiYmKGl8fChpPW5ldyBTdCksZnVuY3Rpb24odCxyLGUsbixvLHUpe3ZhciBpPWUmRnIsYz1Dcih0KSxhPWMubGVuZ3RoO2lmKGEhPUNyKHIpLmxlbmd0aCYmIWkpcmV0dXJuITE7Zm9yKHZhciBmPWE7Zi0tOyl7dmFyIGw9Y1tmXTtpZighKGk/bCBpbiByOk1yLmNhbGwocixsKSkpcmV0dXJuITF9dmFyIHM9dS5nZXQodCkscD11LmdldChyKTtpZihzJiZwKXJldHVybiBzPT1yJiZwPT10O3ZhciBiPSEwO3Uuc2V0KHQsciksdS5zZXQocix0KTtmb3IodmFyIHY9aTsrK2Y8YTspe3ZhciB5PXRbbD1jW2ZdXSxoPXJbbF07aWYobil2YXIgZD1pP24oaCx5LGwscix0LHUpOm4oeSxoLGwsdCxyLHUpO2lmKCEodm9pZCAwPT09ZD95PT09aHx8byh5LGgsZSxuLHUpOmQpKXtiPSExO2JyZWFrfXZ8fCh2PSJjb25zdHJ1Y3RvciI9PWwpfWlmKGImJiF2KXt2YXIgaj10LmNvbnN0cnVjdG9yLGc9ci5jb25zdHJ1Y3RvcjtqPT1nfHwhKCJjb25zdHJ1Y3RvciJpbiB0KXx8ISgiY29uc3RydWN0b3IiaW4gcil8fCJmdW5jdGlvbiI9PXR5cGVvZiBqJiZqIGluc3RhbmNlb2YgaiYmImZ1bmN0aW9uIj09dHlwZW9mIGcmJmcgaW5zdGFuY2VvZiBnfHwoYj0hMSl9cmV0dXJuIHUuZGVsZXRlKHQpLHUuZGVsZXRlKHIpLGJ9KHIsZSxuLG8sdSxpKSl9ZnVuY3Rpb24gaWUodCxyLGUsbixvKXtyZXR1cm4gdD09PXJ8fChudWxsPT10fHxudWxsPT1yfHwhdih0KSYmIXYocik/dCE9dCYmciE9cjp1ZSh0LHIsZSxuLGllLG8pKX12YXIgY2U9MSxhZT0yO2Z1bmN0aW9uIGZlKHQpe3JldHVybiB0PT10JiYhXyh0KX1mdW5jdGlvbiBsZSh0LHIpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZSYmKGVbdF09PT1yJiYodm9pZCAwIT09cnx8dCBpbiBPYmplY3QoZSkpKX19ZnVuY3Rpb24gc2UodCl7dmFyIHI9ZnVuY3Rpb24odCl7Zm9yKHZhciByPWtyKHQpLGU9ci5sZW5ndGg7ZS0tOyl7dmFyIG49cltlXSxvPXRbbl07cltlXT1bbixvLGZlKG8pXX1yZXR1cm4gcn0odCk7cmV0dXJuIDE9PXIubGVuZ3RoJiZyWzBdWzJdP2xlKHJbMF1bMF0sclswXVsxXSk6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT10fHxmdW5jdGlvbih0LHIsZSxuKXt2YXIgbz1lLmxlbmd0aCx1PW8saT0hbjtpZihudWxsPT10KXJldHVybiF1O2Zvcih0PU9iamVjdCh0KTtvLS07KXt2YXIgYz1lW29dO2lmKGkmJmNbMl0/Y1sxXSE9PXRbY1swXV06IShjWzBdaW4gdCkpcmV0dXJuITF9Zm9yKDsrK288dTspe3ZhciBhPShjPWVbb10pWzBdLGY9dFthXSxsPWNbMV07aWYoaSYmY1syXSl7aWYodm9pZCAwPT09ZiYmIShhIGluIHQpKXJldHVybiExfWVsc2V7dmFyIHM9bmV3IFN0O2lmKG4pdmFyIHA9bihmLGwsYSx0LHIscyk7aWYoISh2b2lkIDA9PT1wP2llKGwsZixjZXxhZSxuLHMpOnApKXJldHVybiExfX1yZXR1cm4hMH0oZSx0LHIpfX1mdW5jdGlvbiBwZSh0LHIpe3JldHVybiBudWxsIT10JiZyIGluIE9iamVjdCh0KX1mdW5jdGlvbiBiZShyLGUpe3JldHVybiBudWxsIT1yJiZmdW5jdGlvbihyLGUsbil7Zm9yKHZhciBvPS0xLHU9KGU9bHQoZSxyKSkubGVuZ3RoLGk9ITE7KytvPHU7KXt2YXIgYz1wdChlW29dKTtpZighKGk9bnVsbCE9ciYmbihyLGMpKSlicmVhaztyPXJbY119cmV0dXJuIGl8fCsrbyE9dT9pOiEhKHU9bnVsbD09cj8wOnIubGVuZ3RoKSYmaHIodSkmJnZyKGMsdSkmJih0KHIpfHxjcihyKSl9KHIsZSxwZSl9dmFyIHZlPTEseWU9MjtmdW5jdGlvbiBoZSh0KXtyZXR1cm4gdH1mdW5jdGlvbiBkZSh0KXtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIG51bGw9PXI/dm9pZCAwOnJbdF19fWZ1bmN0aW9uIGplKHQpe3JldHVybiBnKHQpP2RlKHB0KHQpKTpmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIGJ0KHIsdCl9fSh0KX1mdW5jdGlvbiBnZShyKXtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2Ygcj9yOm51bGw9PXI/aGU6Im9iamVjdCI9PXR5cGVvZiByP3Qocik/KGU9clswXSxuPXJbMV0sZyhlKSYmZmUobik/bGUocHQoZSksbik6ZnVuY3Rpb24odCl7dmFyIHI9dnQodCxlKTtyZXR1cm4gdm9pZCAwPT09ciYmcj09PW4/YmUodCxlKTppZShuLHIsdmV8eWUpfSk6c2Uocik6amUocik7dmFyIGUsbn12YXIgX2UsT2U9ZnVuY3Rpb24odCxyLGUpe2Zvcih2YXIgbj0tMSxvPU9iamVjdCh0KSx1PWUodCksaT11Lmxlbmd0aDtpLS07KXt2YXIgYz11W19lP2k6KytuXTtpZighMT09PXIob1tjXSxjLG8pKWJyZWFrfXJldHVybiB0fTt2YXIgbWU9ZnVuY3Rpb24odCxyKXtyZXR1cm4gZnVuY3Rpb24oZSxuKXtpZihudWxsPT1lKXJldHVybiBlO2lmKCEkcihlKSlyZXR1cm4gdChlLG4pO2Zvcih2YXIgbz1lLmxlbmd0aCx1PXI/bzotMSxpPU9iamVjdChlKTsocj91LS06Kyt1PG8pJiYhMSE9PW4oaVt1XSx1LGkpOyk7cmV0dXJuIGV9fSgoZnVuY3Rpb24odCxyKXtyZXR1cm4gdCYmT2UodCxyLGtyKX0pKSx3ZT1tZTtmdW5jdGlvbiBBZSh0LHIpe3ZhciBlPS0xLG49JHIodCk/QXJyYXkodC5sZW5ndGgpOltdO3JldHVybiB3ZSh0LChmdW5jdGlvbih0LG8sdSl7blsrK2VdPXIodCxvLHUpfSkpLG59dmFyIFNlPUFycmF5LnByb3RvdHlwZS5qb2luO3ZhciB4ZT0iW29iamVjdCBTdHJpbmddIjt2YXIgUGU9ZGUoImxlbmd0aCIpLHplPVJlZ0V4cCgiW1xcdTIwMGRcXHVkODAwLVxcdWRmZmZcXHUwMzAwLVxcdTAzNmZcXHVmZTIwLVxcdWZlMmZcXHUyMGQwLVxcdTIwZmZcXHVmZTBlXFx1ZmUwZl0iKTt2YXIgRWU9IlxcdWQ4MDAtXFx1ZGZmZiIsSWU9IlsiK0VlKyJdIixOZT0iW1xcdTAzMDAtXFx1MDM2ZlxcdWZlMjAtXFx1ZmUyZlxcdTIwZDAtXFx1MjBmZl0iLFRlPSJcXHVkODNjW1xcdWRmZmItXFx1ZGZmZl0iLCRlPSJbXiIrRWUrIl0iLGtlPSIoPzpcXHVkODNjW1xcdWRkZTYtXFx1ZGRmZl0pezJ9IixDZT0iW1xcdWQ4MDAtXFx1ZGJmZl1bXFx1ZGMwMC1cXHVkZmZmXSIsRmU9Iig/OiIrTmUrInwiK1RlKyIpIisiPyIsTWU9IltcXHVmZTBlXFx1ZmUwZl0/IixVZT1NZStGZSsoIig/OlxcdTIwMGQoPzoiK1skZSxrZSxDZV0uam9pbigifCIpKyIpIitNZStGZSsiKSoiKSxEZT0iKD86IitbJGUrTmUrIj8iLE5lLGtlLENlLEllXS5qb2luKCJ8IikrIikiLEJlPVJlZ0V4cChUZSsiKD89IitUZSsiKXwiK0RlK1VlLCJnIik7ZnVuY3Rpb24gUmUodCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiB6ZS50ZXN0KHQpfSh0KT9mdW5jdGlvbih0KXtmb3IodmFyIHI9QmUubGFzdEluZGV4PTA7QmUudGVzdCh0KTspKytyO3JldHVybiByfSh0KTpQZSh0KX12YXIgTGU9IltvYmplY3QgTWFwXSIsVmU9IltvYmplY3QgU2V0XSI7ZnVuY3Rpb24gS2Uocil7aWYobnVsbD09cilyZXR1cm4gMDtpZigkcihyKSlyZXR1cm4ic3RyaW5nIj09dHlwZW9mKGU9cil8fCF0KGUpJiZ2KGUpJiZiKGUpPT14ZT9SZShyKTpyLmxlbmd0aDt2YXIgZSxuPVpyKHIpO3JldHVybiBuPT1MZXx8bj09VmU/ci5zaXplOlRyKHIpLmxlbmd0aH12YXIgV2U9IltvYmplY3QgTnVtYmVyXSI7ZnVuY3Rpb24gcWUodCxyKXtmb3IodmFyIGU9LTEsbj1udWxsPT10PzA6dC5sZW5ndGg7KytlPG4mJiExIT09cih0W2VdLGUsdCk7KTtyZXR1cm4gdH12YXIgR2U9ZnVuY3Rpb24oKXt0cnl7dmFyIHQ9VShPYmplY3QsImRlZmluZVByb3BlcnR5Iik7cmV0dXJuIHQoe30sIiIse30pLHR9Y2F0Y2godCl7fX0oKSxIZT1HZTtmdW5jdGlvbiBKZSh0LHIsZSl7Il9fcHJvdG9fXyI9PXImJkhlP0hlKHQscix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsdmFsdWU6ZSx3cml0YWJsZTohMH0pOnRbcl09ZX12YXIgUWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBYZSh0LHIsZSl7dmFyIG49dFtyXTtRZS5jYWxsKHQscikmJlYobixlKSYmKHZvaWQgMCE9PWV8fHIgaW4gdCl8fEplKHQscixlKX1mdW5jdGlvbiBZZSh0LHIsZSxuKXt2YXIgbz0hZTtlfHwoZT17fSk7Zm9yKHZhciB1PS0xLGk9ci5sZW5ndGg7Kyt1PGk7KXt2YXIgYz1yW3VdLGE9bj9uKGVbY10sdFtjXSxjLGUsdCk6dm9pZCAwO3ZvaWQgMD09PWEmJihhPXRbY10pLG8/SmUoZSxjLGEpOlhlKGUsYyxhKX1yZXR1cm4gZX12YXIgWmU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiB0bih0KXtpZighXyh0KSlyZXR1cm4gZnVuY3Rpb24odCl7dmFyIHI9W107aWYobnVsbCE9dClmb3IodmFyIGUgaW4gT2JqZWN0KHQpKXIucHVzaChlKTtyZXR1cm4gcn0odCk7dmFyIHI9enIodCksZT1bXTtmb3IodmFyIG4gaW4gdCkoImNvbnN0cnVjdG9yIiE9bnx8IXImJlplLmNhbGwodCxuKSkmJmUucHVzaChuKTtyZXR1cm4gZX1mdW5jdGlvbiBybih0KXtyZXR1cm4gJHIodCk/eHIodCwhMCk6dG4odCl9dmFyIGVuPSJvYmplY3QiPT10eXBlb2YgZXhwb3J0cyYmZXhwb3J0cyYmIWV4cG9ydHMubm9kZVR5cGUmJmV4cG9ydHMsbm49ZW4mJiJvYmplY3QiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUmJiFtb2R1bGUubm9kZVR5cGUmJm1vZHVsZSxvbj1ubiYmbm4uZXhwb3J0cz09PWVuP24uQnVmZmVyOnZvaWQgMCx1bj1vbj9vbi5hbGxvY1Vuc2FmZTp2b2lkIDA7dmFyIGNuPUVyKE9iamVjdC5nZXRQcm90b3R5cGVPZixPYmplY3QpLGFuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM/ZnVuY3Rpb24odCl7Zm9yKHZhciByPVtdO3Q7KVF0KHIsZXIodCkpLHQ9Y24odCk7cmV0dXJuIHJ9Oll0LGZuPWFuO2Z1bmN0aW9uIGxuKHQpe3JldHVybiBYdCh0LHJuLGZuKX12YXIgc249T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiBwbih0KXt2YXIgcj1uZXcgdC5jb25zdHJ1Y3Rvcih0LmJ5dGVMZW5ndGgpO3JldHVybiBuZXcgVHQocikuc2V0KG5ldyBUdCh0KSkscn12YXIgYm49L1x3KiQvO3ZhciB2bj1vP28ucHJvdG90eXBlOnZvaWQgMCx5bj12bj92bi52YWx1ZU9mOnZvaWQgMDt2YXIgaG49IltvYmplY3QgQm9vbGVhbl0iLGRuPSJbb2JqZWN0IERhdGVdIixqbj0iW29iamVjdCBNYXBdIixnbj0iW29iamVjdCBOdW1iZXJdIixfbj0iW29iamVjdCBSZWdFeHBdIixPbj0iW29iamVjdCBTZXRdIixtbj0iW29iamVjdCBTdHJpbmddIix3bj0iW29iamVjdCBTeW1ib2xdIixBbj0iW29iamVjdCBBcnJheUJ1ZmZlcl0iLFNuPSJbb2JqZWN0IERhdGFWaWV3XSIseG49IltvYmplY3QgRmxvYXQzMkFycmF5XSIsUG49IltvYmplY3QgRmxvYXQ2NEFycmF5XSIsem49IltvYmplY3QgSW50OEFycmF5XSIsRW49IltvYmplY3QgSW50MTZBcnJheV0iLEluPSJbb2JqZWN0IEludDMyQXJyYXldIixObj0iW29iamVjdCBVaW50OEFycmF5XSIsVG49IltvYmplY3QgVWludDhDbGFtcGVkQXJyYXldIiwkbj0iW29iamVjdCBVaW50MTZBcnJheV0iLGtuPSJbb2JqZWN0IFVpbnQzMkFycmF5XSI7ZnVuY3Rpb24gQ24odCxyLGUpe3ZhciBuLG89dC5jb25zdHJ1Y3Rvcjtzd2l0Y2gocil7Y2FzZSBBbjpyZXR1cm4gcG4odCk7Y2FzZSBobjpjYXNlIGRuOnJldHVybiBuZXcgbygrdCk7Y2FzZSBTbjpyZXR1cm4gZnVuY3Rpb24odCxyKXt2YXIgZT1yP3BuKHQuYnVmZmVyKTp0LmJ1ZmZlcjtyZXR1cm4gbmV3IHQuY29uc3RydWN0b3IoZSx0LmJ5dGVPZmZzZXQsdC5ieXRlTGVuZ3RoKX0odCxlKTtjYXNlIHhuOmNhc2UgUG46Y2FzZSB6bjpjYXNlIEVuOmNhc2UgSW46Y2FzZSBObjpjYXNlIFRuOmNhc2UgJG46Y2FzZSBrbjpyZXR1cm4gZnVuY3Rpb24odCxyKXt2YXIgZT1yP3BuKHQuYnVmZmVyKTp0LmJ1ZmZlcjtyZXR1cm4gbmV3IHQuY29uc3RydWN0b3IoZSx0LmJ5dGVPZmZzZXQsdC5sZW5ndGgpfSh0LGUpO2Nhc2Ugam46cmV0dXJuIG5ldyBvO2Nhc2UgZ246Y2FzZSBtbjpyZXR1cm4gbmV3IG8odCk7Y2FzZSBfbjpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIHI9bmV3IHQuY29uc3RydWN0b3IodC5zb3VyY2UsYm4uZXhlYyh0KSk7cmV0dXJuIHIubGFzdEluZGV4PXQubGFzdEluZGV4LHJ9KHQpO2Nhc2UgT246cmV0dXJuIG5ldyBvO2Nhc2Ugd246cmV0dXJuIG49dCx5bj9PYmplY3QoeW4uY2FsbChuKSk6e319fXZhciBGbj1PYmplY3QuY3JlYXRlLE1uPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4gZnVuY3Rpb24ocil7aWYoIV8ocikpcmV0dXJue307aWYoRm4pcmV0dXJuIEZuKHIpO3QucHJvdG90eXBlPXI7dmFyIGU9bmV3IHQ7cmV0dXJuIHQucHJvdG90eXBlPXZvaWQgMCxlfX0oKSxVbj1Nbjt2YXIgRG49bXImJm1yLmlzTWFwLEJuPURuP2pyKERuKTpmdW5jdGlvbih0KXtyZXR1cm4gdih0KSYmIltvYmplY3QgTWFwXSI9PVpyKHQpfTt2YXIgUm49bXImJm1yLmlzU2V0LExuPVJuP2pyKFJuKTpmdW5jdGlvbih0KXtyZXR1cm4gdih0KSYmIltvYmplY3QgU2V0XSI9PVpyKHQpfSxWbj0xLEtuPTIsV249NCxxbj0iW29iamVjdCBBcmd1bWVudHNdIixHbj0iW29iamVjdCBGdW5jdGlvbl0iLEhuPSJbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSIsSm49IltvYmplY3QgT2JqZWN0XSIsUW49e307ZnVuY3Rpb24gWG4ocixlLG4sbyx1LGkpe3ZhciBjLGE9ZSZWbixmPWUmS24sbD1lJlduO2lmKG4mJihjPXU/bihyLG8sdSxpKTpuKHIpKSx2b2lkIDAhPT1jKXJldHVybiBjO2lmKCFfKHIpKXJldHVybiByO3ZhciBzPXQocik7aWYocyl7aWYoYz1mdW5jdGlvbih0KXt2YXIgcj10Lmxlbmd0aCxlPW5ldyB0LmNvbnN0cnVjdG9yKHIpO3JldHVybiByJiYic3RyaW5nIj09dHlwZW9mIHRbMF0mJnNuLmNhbGwodCwiaW5kZXgiKSYmKGUuaW5kZXg9dC5pbmRleCxlLmlucHV0PXQuaW5wdXQpLGV9KHIpLCFhKXJldHVybiBmdW5jdGlvbih0LHIpe3ZhciBlPS0xLG49dC5sZW5ndGg7Zm9yKHJ8fChyPUFycmF5KG4pKTsrK2U8bjspcltlXT10W2VdO3JldHVybiByfShyLGMpfWVsc2V7dmFyIHA9WnIociksYj1wPT1Hbnx8cD09SG47aWYoc3IocikpcmV0dXJuIGZ1bmN0aW9uKHQscil7aWYocilyZXR1cm4gdC5zbGljZSgpO3ZhciBlPXQubGVuZ3RoLG49dW4/dW4oZSk6bmV3IHQuY29uc3RydWN0b3IoZSk7cmV0dXJuIHQuY29weShuKSxufShyLGEpO2lmKHA9PUpufHxwPT1xbnx8YiYmIXUpe2lmKGM9Znx8Yj97fTpmdW5jdGlvbih0KXtyZXR1cm4iZnVuY3Rpb24iIT10eXBlb2YgdC5jb25zdHJ1Y3Rvcnx8enIodCk/e306VW4oY24odCkpfShyKSwhYSlyZXR1cm4gZj9mdW5jdGlvbih0LHIpe3JldHVybiBZZSh0LGZuKHQpLHIpfShyLGZ1bmN0aW9uKHQscil7cmV0dXJuIHQmJlllKHIscm4ociksdCl9KGMscikpOmZ1bmN0aW9uKHQscil7cmV0dXJuIFllKHQsZXIodCkscil9KHIsZnVuY3Rpb24odCxyKXtyZXR1cm4gdCYmWWUocixrcihyKSx0KX0oYyxyKSl9ZWxzZXtpZighUW5bcF0pcmV0dXJuIHU/cjp7fTtjPUNuKHIscCxhKX19aXx8KGk9bmV3IFN0KTt2YXIgdj1pLmdldChyKTtpZih2KXJldHVybiB2O2kuc2V0KHIsYyksTG4ocik/ci5mb3JFYWNoKChmdW5jdGlvbih0KXtjLmFkZChYbih0LGUsbix0LHIsaSkpfSkpOkJuKHIpJiZyLmZvckVhY2goKGZ1bmN0aW9uKHQsbyl7Yy5zZXQobyxYbih0LGUsbixvLHIsaSkpfSkpO3ZhciB5PXM/dm9pZCAwOihsP2Y/bG46Q3I6Zj9ybjprcikocik7cmV0dXJuIHFlKHl8fHIsKGZ1bmN0aW9uKHQsbyl7eSYmKHQ9cltvPXRdKSxYZShjLG8sWG4odCxlLG4sbyxyLGkpKX0pKSxjfVFuW3FuXT1RblsiW29iamVjdCBBcnJheV0iXT1RblsiW29iamVjdCBBcnJheUJ1ZmZlcl0iXT1RblsiW29iamVjdCBEYXRhVmlld10iXT1RblsiW29iamVjdCBCb29sZWFuXSJdPVFuWyJbb2JqZWN0IERhdGVdIl09UW5bIltvYmplY3QgRmxvYXQzMkFycmF5XSJdPVFuWyJbb2JqZWN0IEZsb2F0NjRBcnJheV0iXT1RblsiW29iamVjdCBJbnQ4QXJyYXldIl09UW5bIltvYmplY3QgSW50MTZBcnJheV0iXT1RblsiW29iamVjdCBJbnQzMkFycmF5XSJdPVFuWyJbb2JqZWN0IE1hcF0iXT1RblsiW29iamVjdCBOdW1iZXJdIl09UW5bSm5dPVFuWyJbb2JqZWN0IFJlZ0V4cF0iXT1RblsiW29iamVjdCBTZXRdIl09UW5bIltvYmplY3QgU3RyaW5nXSJdPVFuWyJbb2JqZWN0IFN5bWJvbF0iXT1RblsiW29iamVjdCBVaW50OEFycmF5XSJdPVFuWyJbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XSJdPVFuWyJbb2JqZWN0IFVpbnQxNkFycmF5XSJdPVFuWyJbb2JqZWN0IFVpbnQzMkFycmF5XSJdPSEwLFFuWyJbb2JqZWN0IEVycm9yXSJdPVFuW0duXT1RblsiW29iamVjdCBXZWFrTWFwXSJdPSExO3ZhciBZbj0xLFpuPTQ7ZnVuY3Rpb24gdG8odCl7cmV0dXJuIFhuKHQsWW58Wm4pfWZ1bmN0aW9uIHJvKHQpe2xldCByPSExO2lmKGh0KHQpKXI9IWlzTmFOKE51bWJlcih0KSk7ZWxzZSBpZihmdW5jdGlvbih0KXtyZXR1cm4iW29iamVjdCBOdW1iZXJdIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KX0odCkpe2lmKF90KHQpKXJldHVybiExO3I9ITB9cmV0dXJuIHJ9ZnVuY3Rpb24gZW8odCl7aWYoIWh0KHQpJiYhcm8odCkmJiFoKHQpKXJldHVybiIiO2xldCByPSIiO3RyeXtyPVN0cmluZyh0KX1jYXRjaCh0KXt9dHJ5e3I9dC50b1N0cmluZygpfWNhdGNoKHQpe31yZXR1cm4gcn12YXIgbm89TWF0aC5jZWlsLG9vPU1hdGgubWF4O3ZhciB1bz0vXHMvO3ZhciBpbz0vXlxzKy87ZnVuY3Rpb24gY28odCl7cmV0dXJuIHQ/dC5zbGljZSgwLGZ1bmN0aW9uKHQpe2Zvcih2YXIgcj10Lmxlbmd0aDtyLS0mJnVvLnRlc3QodC5jaGFyQXQocikpOyk7cmV0dXJuIHJ9KHQpKzEpLnJlcGxhY2UoaW8sIiIpOnR9dmFyIGFvPU5hTixmbz0vXlstK10weFswLTlhLWZdKyQvaSxsbz0vXjBiWzAxXSskL2ksc289L14wb1swLTddKyQvaSxwbz1wYXJzZUludDt2YXIgYm89MS8wLHZvPTE3OTc2OTMxMzQ4NjIzMTU3ZTI5MjtmdW5jdGlvbiB5byh0KXtyZXR1cm4gdD8odD1mdW5jdGlvbih0KXtpZigibnVtYmVyIj09dHlwZW9mIHQpcmV0dXJuIHQ7aWYoaCh0KSlyZXR1cm4gYW87aWYoXyh0KSl7dmFyIHI9ImZ1bmN0aW9uIj09dHlwZW9mIHQudmFsdWVPZj90LnZhbHVlT2YoKTp0O3Q9XyhyKT9yKyIiOnJ9aWYoInN0cmluZyIhPXR5cGVvZiB0KXJldHVybiAwPT09dD90Oit0O3Q9Y28odCk7dmFyIGU9bG8udGVzdCh0KTtyZXR1cm4gZXx8c28udGVzdCh0KT9wbyh0LnNsaWNlKDIpLGU/Mjo4KTpmby50ZXN0KHQpP2FvOit0fSh0KSk9PT1ib3x8dD09PS1ibz8odDwwPy0xOjEpKnZvOnQ9PXQ/dDowOjA9PT10P3Q6MH12YXIgaG89ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKHIsZSxuKXtyZXR1cm4gbiYmIm51bWJlciIhPXR5cGVvZiBuJiZmdW5jdGlvbih0LHIsZSl7aWYoIV8oZSkpcmV0dXJuITE7dmFyIG49dHlwZW9mIHI7cmV0dXJuISEoIm51bWJlciI9PW4/JHIoZSkmJnZyKHIsZS5sZW5ndGgpOiJzdHJpbmciPT1uJiZyIGluIGUpJiZWKGVbcl0sdCl9KHIsZSxuKSYmKGU9bj12b2lkIDApLHI9eW8ociksdm9pZCAwPT09ZT8oZT1yLHI9MCk6ZT15byhlKSxmdW5jdGlvbih0LHIsZSxuKXtmb3IodmFyIG89LTEsdT1vbyhubygoci10KS8oZXx8MSkpLDApLGk9QXJyYXkodSk7dS0tOylpW24/dTorK29dPXQsdCs9ZTtyZXR1cm4gaX0ocixlLG49dm9pZCAwPT09bj9yPGU/MTotMTp5byhuKSx0KX19KCksam89aG87ZnVuY3Rpb24gZ28odCxyPW51bGwsZT17fSl7UyhyKXx8KHI9dD0+dCk7bGV0IG49dnQoZSwiZm9yY2UiLCExKTtyZXR1cm4gQXQobil8fChuPSExKSxmdW5jdGlvbih0LHIsZT0hMSl7bGV0IG49W107aWYoIWd0KHQpJiYhZHQodCkpcmV0dXJuIHIodCxudWxsLFtdKTtmdW5jdGlvbiBvKHQpe2lmKGd0KHQpKXJldHVybiBqbyhLZSh0KSk7aWYoZHQodCkpe2xldCByPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLG49bnVsbDtyZXR1cm4gZSYmKG49T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KSksZ3Qocil8fChyPVtdKSxndChuKXx8KG49W10pLFsuLi5yLC4uLm5dfXJldHVybiB0fXJldHVybiBmdW5jdGlvbiB0KGUsdSl7aWYoZ3QoZSkpcmV0dXJuIG8oZSkubWFwKChvPT57bGV0IHU9ZVtvXSxpPXRvKG4pO3JldHVybiBuLnB1c2gobyksdT1yKHUsbyxpKSx1PXQodSksbi5wb3AoKSx1fSkpO2lmKGR0KGUpKXtsZXQgdT1vKGUpLGk9e307cmV0dXJuIHUubWFwKChvPT57bGV0IHU9ZVtvXSxjPXRvKG4pO24ucHVzaChvKSx1PXIodSxvLGMpLHU9dCh1KSxuLnBvcCgpLGlbb109dX0pKSxpfXJldHVybiBlfSh0KX0odCxyLG4pfWZ1bmN0aW9uIF9vKHIsZT17fSl7aWYoIWp0KHIpJiYhbXQocikpcmV0dXJuW107bGV0IG49dnQoZSwiYmluZEtleSIsbnVsbCk7aHQobil8fChuPSJpZCIpO2xldCBvPXZ0KGUsImJpbmRQYXJlbnQiLG51bGwpO2h0KG8pfHwobz0icGFyZW50SWQiKTtsZXQgdT12dChlLCJiaW5kQmVsb25nIixudWxsKTtodCh1KXx8KHU9ImtleSIpO2xldCBpPXZ0KGUsImJpbmRUZXh0IixudWxsKTtodChpKXx8KGk9InRleHQiKTtsZXQgYz12dChlLCJiaW5kVHlwZSIsbnVsbCk7aHQoYyl8fChjPSJ0eXBlIik7bGV0IGE9dnQoZSwiYmluZE51bU9mQ2hpbHJlbiIsbnVsbCk7ZnVuY3Rpb24gZihyLGUpe3ZhciBuLG87dmFyIHUsaTtyZXR1cm4gcj10byhyKSxvPXQ9PmgodCk/ZW8odCk6dCxyPSh0KG49cik/dXQ6QWUpKG4sZ2UobykpLGgoZSkmJihlPWVvKGUpKSwoaHQoZSl8fHJvKGUpKSYmci5wdXNoKGUpLGk9Ii0iLG51bGw9PSh1PXIpPyIiOlNlLmNhbGwodSxpKX1odChhKXx8KGE9Im51bU9mQ2hpbHJlbiIpO2xldCBsPVtdO3JldHVybiBnbyhyLCgodCxyLGUpPT57bGV0IHM9ZihlLHIpLHA9ZihlLG51bGwpLHk9Im5vZGUiO2R0KHQpP3k9Im9iamVjdCI6Z3QodCkmJih5PSJhcnJheSIpO2xldCBoPXtbbl06cyxbb106cCxbY106eX07aWYoKGh0KHIpfHxmdW5jdGlvbih0KXtyZXR1cm4ibnVtYmVyIj09dHlwZW9mIHR8fHYodCkmJmIodCk9PVdlfShyKSkmJihoW3VdPXIpLGR0KHQpfHxndCh0KXx8KGhbaV09dCksZHQodCl8fGd0KHQpKXtsZXQgcj1udWxsO2R0KHQpP3I9S2Uoa3IodCkpOmd0KHQpJiYocj1LZSh0KSksaFthXT1yfXJldHVybiBsLnB1c2goaCksdH0pLHtmb3JjZTohMH0pLGx9ZnVuY3Rpb24gT28odCl7cmV0dXJuIE9vPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVybiB0eXBlb2YgdH06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJnQuY29uc3RydWN0b3I9PT1TeW1ib2wmJnQhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiB0fSxPbyh0KX1mdW5jdGlvbiBtbyh0KXt2YXIgcj1mdW5jdGlvbih0LHIpe2lmKCJvYmplY3QiIT09T28odCl8fG51bGw9PT10KXJldHVybiB0O3ZhciBlPXRbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDAhPT1lKXt2YXIgbj1lLmNhbGwodCxyfHwiZGVmYXVsdCIpO2lmKCJvYmplY3QiIT09T28obikpcmV0dXJuIG47dGhyb3cgbmV3IFR5cGVFcnJvcigiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS4iKX1yZXR1cm4oInN0cmluZyI9PT1yP1N0cmluZzpOdW1iZXIpKHQpfSh0LCJzdHJpbmciKTtyZXR1cm4ic3ltYm9sIj09PU9vKHIpP3I6U3RyaW5nKHIpfWZ1bmN0aW9uIHdvKHQscixlKXtyZXR1cm4ocj1tbyhyKSlpbiB0P09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIse3ZhbHVlOmUsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTp0W3JdPWUsdH1mdW5jdGlvbiBBbyhyLGUpe3ZhciBuO3JldHVybih0KHIpP3FlOndlKShyLCJmdW5jdGlvbiI9PXR5cGVvZihuPWUpP246aGUpfWZ1bmN0aW9uIFNvKHQscixlKXtyZXR1cm4gbnVsbD09dD90OmZ1bmN0aW9uKHQscixlLG4pe2lmKCFfKHQpKXJldHVybiB0O2Zvcih2YXIgbz0tMSx1PShyPWx0KHIsdCkpLmxlbmd0aCxpPXUtMSxjPXQ7bnVsbCE9YyYmKytvPHU7KXt2YXIgYT1wdChyW29dKSxmPWU7aWYoIl9fcHJvdG9fXyI9PT1hfHwiY29uc3RydWN0b3IiPT09YXx8InByb3RvdHlwZSI9PT1hKXJldHVybiB0O2lmKG8hPWkpe3ZhciBsPWNbYV07dm9pZCAwPT09KGY9bj9uKGwsYSxjKTp2b2lkIDApJiYoZj1fKGwpP2w6dnIocltvKzFdKT9bXTp7fSl9WGUoYyxhLGYpLGM9Y1thXX1yZXR1cm4gdH0odCxyLGUpfWZ1bmN0aW9uIHhvKHQscil7cmV0dXJuIHIubGVuZ3RoPDI/dDpidCh0LGZ1bmN0aW9uKHQscixlKXt2YXIgbj0tMSxvPXQubGVuZ3RoO3I8MCYmKHI9LXI+bz8wOm8rciksKGU9ZT5vP286ZSk8MCYmKGUrPW8pLG89cj5lPzA6ZS1yPj4+MCxyPj4+PTA7Zm9yKHZhciB1PUFycmF5KG8pOysrbjxvOyl1W25dPXRbbityXTtyZXR1cm4gdX0ociwwLC0xKSl9ZnVuY3Rpb24gUG8odCxyKXtyZXR1cm4gbnVsbD09KHQ9eG8odCxyPWx0KHIsdCkpKXx8ZGVsZXRlIHRbcHQoKGU9cixuPW51bGw9PWU/MDplLmxlbmd0aCxuP2Vbbi0xXTp2b2lkIDApKV07dmFyIGUsbn12YXIgem89IltvYmplY3QgT2JqZWN0XSIsRW89RnVuY3Rpb24ucHJvdG90eXBlLElvPU9iamVjdC5wcm90b3R5cGUsTm89RW8udG9TdHJpbmcsVG89SW8uaGFzT3duUHJvcGVydHksJG89Tm8uY2FsbChPYmplY3QpO2Z1bmN0aW9uIGtvKHQpe3JldHVybiBmdW5jdGlvbih0KXtpZighdih0KXx8Yih0KSE9em8pcmV0dXJuITE7dmFyIHI9Y24odCk7aWYobnVsbD09PXIpcmV0dXJuITA7dmFyIGU9VG8uY2FsbChyLCJjb25zdHJ1Y3RvciIpJiZyLmNvbnN0cnVjdG9yO3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBlJiZlIGluc3RhbmNlb2YgZSYmTm8uY2FsbChlKT09JG99KHQpP3ZvaWQgMDp0fXZhciBDbz1vP28uaXNDb25jYXRTcHJlYWRhYmxlOnZvaWQgMDtmdW5jdGlvbiBGbyhyKXtyZXR1cm4gdChyKXx8Y3Iocil8fCEhKENvJiZyJiZyW0NvXSl9ZnVuY3Rpb24gTW8odCxyLGUsbixvKXt2YXIgdT0tMSxpPXQubGVuZ3RoO2ZvcihlfHwoZT1Gbyksb3x8KG89W10pOysrdTxpOyl7dmFyIGM9dFt1XTtyPjAmJmUoYyk/cj4xP01vKGMsci0xLGUsbixvKTpRdChvLGMpOm58fChvW28ubGVuZ3RoXT1jKX1yZXR1cm4gb31mdW5jdGlvbiBVbyh0KXtyZXR1cm4obnVsbD09dD8wOnQubGVuZ3RoKT9Nbyh0LDEpOltdfXZhciBEbz1NYXRoLm1heDt2YXIgQm89SGU/ZnVuY3Rpb24odCxyKXtyZXR1cm4gSGUodCwidG9TdHJpbmciLHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMSx2YWx1ZTooZT1yLGZ1bmN0aW9uKCl7cmV0dXJuIGV9KSx3cml0YWJsZTohMH0pO3ZhciBlfTpoZSxSbz1CbyxMbz1EYXRlLm5vdzt2YXIgVm89ZnVuY3Rpb24odCl7dmFyIHI9MCxlPTA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49TG8oKSxvPTE2LShuLWUpO2lmKGU9bixvPjApe2lmKCsrcj49ODAwKXJldHVybiBhcmd1bWVudHNbMF19ZWxzZSByPTA7cmV0dXJuIHQuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9fShSbyksS289Vm87dmFyIFdvPWZ1bmN0aW9uKHQpe3JldHVybiBLbyhmdW5jdGlvbih0LHIsZSl7cmV0dXJuIHI9RG8odm9pZCAwPT09cj90Lmxlbmd0aC0xOnIsMCksZnVuY3Rpb24oKXtmb3IodmFyIG49YXJndW1lbnRzLG89LTEsdT1EbyhuLmxlbmd0aC1yLDApLGk9QXJyYXkodSk7KytvPHU7KWlbb109bltyK29dO289LTE7Zm9yKHZhciBjPUFycmF5KHIrMSk7KytvPHI7KWNbb109bltvXTtyZXR1cm4gY1tyXT1lKGkpLGZ1bmN0aW9uKHQscixlKXtzd2l0Y2goZS5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gdC5jYWxsKHIpO2Nhc2UgMTpyZXR1cm4gdC5jYWxsKHIsZVswXSk7Y2FzZSAyOnJldHVybiB0LmNhbGwocixlWzBdLGVbMV0pO2Nhc2UgMzpyZXR1cm4gdC5jYWxsKHIsZVswXSxlWzFdLGVbMl0pfXJldHVybiB0LmFwcGx5KHIsZSl9KHQsdGhpcyxjKX19KHQsdm9pZCAwLFVvKSx0KyIiKX0oKGZ1bmN0aW9uKHQscil7dmFyIGU9e307aWYobnVsbD09dClyZXR1cm4gZTt2YXIgbj0hMTtyPXV0KHIsKGZ1bmN0aW9uKHIpe3JldHVybiByPWx0KHIsdCksbnx8KG49ci5sZW5ndGg+MSkscn0pKSxZZSh0LGxuKHQpLGUpLG4mJihlPVhuKGUsNyxrbykpO2Zvcih2YXIgbz1yLmxlbmd0aDtvLS07KVBvKGUscltvXSk7cmV0dXJuIGV9KSkscW89V287ZnVuY3Rpb24gR28odCxyKXt2YXIgZT1PYmplY3Qua2V5cyh0KTtpZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgbj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHQpO3ImJihuPW4uZmlsdGVyKChmdW5jdGlvbihyKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LHIpLmVudW1lcmFibGV9KSkpLGUucHVzaC5hcHBseShlLG4pfXJldHVybiBlfWZ1bmN0aW9uIEhvKHQpe2Zvcih2YXIgcj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspe3ZhciBlPW51bGwhPWFyZ3VtZW50c1tyXT9hcmd1bWVudHNbcl06e307ciUyP0dvKE9iamVjdChlKSwhMCkuZm9yRWFjaCgoZnVuY3Rpb24ocil7d28odCxyLGVbcl0pfSkpOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHQsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoZSkpOkdvKE9iamVjdChlKSkuZm9yRWFjaCgoZnVuY3Rpb24ocil7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQscixPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUscikpfSkpfXJldHVybiB0fWZ1bmN0aW9uIEpvKHQscj17fSl7bGV0IGU9IiRsZXZlbCIsbj0iJHBhcmVudHMiO2lmKCFtdCh0KSlyZXR1cm5bXTtsZXQgbz12dChyLCJiaW5kS2V5IixudWxsKTtodChvKXx8KG89ImlkIik7bGV0IHU9dnQociwiYmluZFBhcmVudCIsbnVsbCk7aHQodSl8fCh1PSJwYXJlbnRJZCIpO2xldCBpPXZ0KHIsImJpbmRDaGlsZHJlbiIsbnVsbCk7aHQoaSl8fChpPSJjaGlsZHJlbiIpO2xldCBjPXZ0KHIsInNhdmVFeHRQcm9wcyIsbnVsbCk7QXQoYyl8fChjPSExKSx0PWZ1bmN0aW9uKHQpe2xldCByPVtdO2Z1bmN0aW9uIGkoaSl7bGV0IGM9W107QW8odCwoKHQsYSk9PntsZXQgZj12dCh0LHUpLGw9dnQoaSxvKTtpZihmJiZsJiZmPT09bCl7bGV0IHU9dnQoaSxuLFtdKTt1PXRvKHUpLHUucHVzaChpW29dKSxyLnB1c2goSG8oe1tlXTppW2VdKzEsW25dOnV9LHQpKX1lbHNlIGMucHVzaCh0KX0pKSx0PWN9aWYodD10byh0KSxmdW5jdGlvbigpe2xldCBvPVtdO0FvKHQsKCh0LGkpPT57T3QodFt1XSk/ci5wdXNoKEhvKHtbZV06MCxbbl06W119LHQpKTpvLnB1c2godCl9KSksdD1vfSgpLDA9PT1yLmxlbmd0aClyZXR1cm4gcjtsZXQgYz0tMTtmb3IoO2MrPTEsIShjPnIubGVuZ3RoLTEpOyl7aWYoaShyW2NdKSwwPT09dC5sZW5ndGgpYnJlYWt9cmV0dXJuIHJ9KHQpO2xldCBhPWZ1bmN0aW9uKHQpe2xldCByPVtdO2Z1bmN0aW9uIGEodCl7cmV0dXJuIGM/dDpxbyh0LFtlLG5dKX1sZXQgZj17fTtyZXR1cm4gQW8odCwoKG4sYyk9PntpZigwPT09bltlXSl7bGV0IHQ9YShuKTtyLnB1c2godCksZltuW29dXT1bY119ZWxzZXtsZXQgZT1mdW5jdGlvbihyKXtmb3IobGV0IGU9MDtlPHQubGVuZ3RoO2UrKyl7bGV0IG49dFtlXTtpZihyW3VdPT09bltvXSlyZXR1cm4gbn1yZXR1cm4gbnVsbH0obik7aWYobnVsbCE9PWUpe2xldCB0PWZbZVtvXV07dD1bLi4udCxpXTtsZXQgdT12dChyLHQsW10pLGM9YShuKTt1LnB1c2goYyksZltuW29dXT1bLi4udCx1Lmxlbmd0aC0xXSxTbyhyLHQsdSl9ZWxzZSBjb25zb2xlLmxvZyhgY2FuIG5vdCBmaW5kIHBhcmVudCBmb3IgJHt2dChuLHUpfWApfX0pKSxyfSh0KTtyZXR1cm4gYX1sZXQgY29udmVydFRvVHJlZVdrPWFzeW5jIGZ1bmN0aW9uKHQscj17fSl7cmV0dXJuIGZ1bmN0aW9uKHQscj17fSl7aWYoIWp0KHQpJiYhbXQodCkpcmV0dXJuW107bGV0IGU9dnQociwiYmluZEtleSIsbnVsbCk7aHQoZSl8fChlPSJpZCIpO2xldCBuPXZ0KHIsImJpbmRQYXJlbnQiLG51bGwpO2h0KG4pfHwobj0icGFyZW50SWQiKTtsZXQgbz12dChyLCJiaW5kVGV4dCIsbnVsbCk7aHQobyl8fChvPSJ0ZXh0Iik7bGV0IHU9dnQociwiYmluZENoaWxkcmVuIixudWxsKTtodCh1KXx8KHU9ImNoaWxkcmVuIik7bGV0IGk9dnQociwiYmluZFR5cGUiLG51bGwpO2h0KGkpfHwoaT0idHlwZSIpO2xldCBjPXZ0KHIsImJpbmROdW1PZkNoaWxyZW4iLG51bGwpO2h0KGMpfHwoYz0ibnVtT2ZDaGlscmVuIik7bGV0IGE9dnQociwiYmluZFJvb3QiLG51bGwpO2h0KGEpfHwoYT0icm9vdCIpO2xldCBmPXZ0KHIsInNhdmVFeHRQcm9wcyIsbnVsbCk7cmV0dXJuIEF0KGYpfHwoZj0hMSksaHQoYSkmJih0PXtbYV06dH0pLEpvKF9vKHQse2JpbmRLZXk6ZSxiaW5kUGFyZW50Om4sYmluZFRleHQ6byxiaW5kVHlwZTppLGJpbmROdW1PZkNoaWxyZW46Y30pLHtiaW5kS2V5OmUsYmluZFBhcmVudDpuLGJpbmRDaGlsZHJlbjp1LHNhdmVFeHRQcm9wczpmfSl9KHQscil9OwoKCmxldCBpbnN0YW5jZSA9IG51bGwKZnVuY3Rpb24gaW5pdChpbnB1dCl7CgogICAgLy9pbml0CiAgICBsZXQgcgogICAgCiAgICAgICAgciA9IHsKICAgICAgICAgICAgbWFpbjogY29udmVydFRvVHJlZVdrCiAgICAgICAgfQogICAgICAgIAoKICAgIC8vb24KICAgIAoKICAgIC8vc2F2ZQogICAgaW5zdGFuY2UgPSByCgp9CgpmdW5jdGlvbiBzZW5kTWVzc2FnZShkYXRhKSB7CiAgICAKICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKGRhdGEpCiAgICAgICAgCn0KCmFzeW5jIGZ1bmN0aW9uIHJ1bihkYXRhKSB7CiAgICAvLyBjb25zb2xlLmxvZygnaW5uZXIgd29ya2VyIHJ1bicsZGF0YSkKCiAgICAvL21vZGUKICAgIGxldCBtb2RlID0gZGF0YS5tb2RlCgogICAgLy9jaGVjawogICAgaWYobW9kZSAhPT0gJ2luaXQnICYmIG1vZGUgIT09ICdjYWxsJyl7CiAgICAgICAgcmV0dXJuCiAgICB9CgogICAgLy9pbml0CiAgICBpZihtb2RlID09PSAnaW5pdCcpewogICAgICAgIAogICAgICAgIHRyeXsKCiAgICAgICAgICAgIC8vdHlwZQogICAgICAgICAgICBsZXQgdHlwZSA9IGRhdGEudHlwZQoKICAgICAgICAgICAgLy9pbnB1dAogICAgICAgICAgICBsZXQgaW5wdXQgPSBkYXRhLmlucHV0CiAgICAKICAgICAgICAgICAgLy9pbnN0YW5jZQogICAgICAgICAgICBpZih0eXBlID09PSAnZnVuY3Rpb24nKXsKICAgICAgICAgICAgICAgIGluaXQoLi4uaW5wdXQpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZih0eXBlID09PSAnb2JqZWN0Jyl7CiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IGNvbnZlcnRUb1RyZWVXawogICAgICAgICAgICB9CgogICAgICAgIH0KICAgICAgICBjYXRjaChlcnIpewogICAgICAgIAogICAgICAgICAgICAvL3NlbmRNZXNzYWdlCiAgICAgICAgICAgIGxldCByZXMgPSB7CiAgICAgICAgICAgICAgICBtb2RlOiAnZW1pdCcsCiAgICAgICAgICAgICAgICBldk5hbWU6ICdlcnJvcicsCiAgICAgICAgICAgICAgICBtc2c6IGVyciwKICAgICAgICAgICAgfQogICAgICAgICAgICBzZW5kTWVzc2FnZShyZXMpCgogICAgICAgIH0KICAgICAgICAgICAgCiAgICB9CgogICAgLy9jaGVjawogICAgaWYobW9kZSA9PT0gJ2NhbGwnKXsKICAgICAgICBsZXQgc3RhdGUgPSAnJwogICAgICAgIGxldCBtc2cgPSBudWxsCgogICAgICAgIHRyeXsKCiAgICAgICAgICAgIC8vZnVuCiAgICAgICAgICAgIGxldCBmdW4gPSBpbnN0YW5jZVtkYXRhLmZ1bl0KCiAgICAgICAgICAgIC8vaW5wdXQKICAgICAgICAgICAgbGV0IGlucHV0ID0gZGF0YS5pbnB1dAoKICAgICAgICAgICAgLy9leGVjCiAgICAgICAgICAgIGF3YWl0IGZ1biguLi5pbnB1dCkKICAgICAgICAgICAgICAgIC50aGVuKChzdWMpID0+IHsKICAgICAgICAgICAgICAgICAgICBzdGF0ZT0nc3VjY2VzcycKICAgICAgICAgICAgICAgICAgICBtc2c9c3VjCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHsKICAgICAgICAgICAgICAgICAgICBzdGF0ZT0nZXJyb3InCiAgICAgICAgICAgICAgICAgICAgbXNnPWVycgogICAgICAgICAgICAgICAgfSkKCiAgICAgICAgfQogICAgICAgIGNhdGNoKGVycil7CiAgICAgICAgICAgIHN0YXRlID0gJ2Vycm9yJwogICAgICAgICAgICBtc2cgPSBlcnIKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy9zZW5kTWVzc2FnZQogICAgICAgIGxldCByZXMgPSB7CiAgICAgICAgICAgIG1vZGU6ICdyZXR1cm4nLAogICAgICAgICAgICBpZDogZGF0YS5pZCwKICAgICAgICAgICAgZnVuOiBkYXRhLmZ1biwKICAgICAgICAgICAgc3RhdGUsCiAgICAgICAgICAgIG1zZywKICAgICAgICB9CiAgICAgICAgc2VuZE1lc3NhZ2UocmVzKQoKICAgIH0KCn0KCmZ1bmN0aW9uIHJlY3ZNZXNzYWdlKGRhdGEpIHsKICAgIC8vIGNvbnNvbGUubG9nKCdpbm5lciB3b3JrZXIgcmVjdjonLCBkYXRhKQoKICAgIC8vZGF0YVJlY3YKICAgIGxldCBkYXRhUmVjdiA9IGRhdGEKCiAgICAvL3J1bgogICAgcnVuKGRhdGFSZWN2KQoKfQoKCiAgICAgICAgc2VsZi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICByZWN2TWVzc2FnZShlLmRhdGEpCiAgICAgICAgfQogICAgICAgIAoKdHJ5ewogICAgcHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgKGVycikgPT4gewogICAgICAgIGNvbnNvbGUubG9nKCdpbm5lcjp1bmhhbmRsZWRSZWplY3Rpb24nLCBlcnIpCiAgICB9KQogICAgcHJvY2Vzcy5vbigndW5jYXVnaHRFeGNlcHRpb24nLCAoZXJyKSA9PiB7CiAgICAgICAgY29uc29sZS5sb2coJ2lubmVyOnVuY2F1Z2h0RXhjZXB0aW9uJywgZXJyKQogICAgfSkKICAgIHByb2Nlc3Mub24oJ3VuY2F1Z2h0RXhjZXB0aW9uTW9uaXRvcicsIChlcnIpID0+IHsKICAgICAgICBjb25zb2xlLmxvZygnaW5uZXI6dW5jYXVnaHRFeGNlcHRpb25Nb25pdG9yJywgZXJyKQogICAgfSkKfQpjYXRjaChlcnIpe30KCg==");function l(){let l=new H;let m=function(d){try{let l=new Blob([d]),m=window.URL||window.webkitURL;return new Worker(m.createObjectURL(l))}catch(d){I(d)}}(d);if(!m)return I("invalid worker"),null;function Z(){let d=function(){let d,l,m=new Promise((function(){d=arguments[0],l=arguments[1]}));return m.resolve=d,m.reject=l,m}(),Z=function(){let d=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,l=[],m="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),Z=m.length;for(let I=0;I<d;I++)l[I]=m[0|Math.random()*Z];return l.join("")}(),I={mode:"call",id:Z,fun:"main",input:[...arguments]};return m.postMessage(I),l.once(Z,(l=>{"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function I(d){l.emit("error",d)}return m.onmessage=function(d){!function(d){let m=d,Z=m.mode;"emit"!==Z&&"return"!==Z||("emit"===Z&&l.emit(m.evName,m.msg),"return"===Z&&l.emit(m.id,m))}(d.data)},m.onerror=I,m.onmessageerror=function(d){I(d.data)},function(){let d={mode:"init",type:"function",input:[...arguments]};m.postMessage(d)}([...arguments]),l.main=Z,l.main=Z,l.terminate=function(){m?(m.terminate(),m=void 0):I("worker has been terminated")},l}n=async function(){let d=[...arguments],m=l();return await m.main(...d).finally((()=>{m.terminate()}))}}();try{process.on("unhandledRejection",(d=>{console.log("outer:unhandledRejection",d)})),process.on("uncaughtException",(d=>{console.log("outer:uncaughtException",d)})),process.on("uncaughtExceptionMonitor",(d=>{console.log("outer:uncaughtExceptionMonitor",d)}))}catch(d){}var g=n;export{g as default};
