const d="function"==typeof Buffer,l="function"==typeof TextDecoder?new TextDecoder:void 0,I=("function"==typeof TextEncoder&&new TextEncoder,Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")),m=(d=>{let l={};return I.forEach(((d,I)=>l[d]=I)),l})(),Z=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,b=String.fromCharCode.bind(String),i="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):d=>new Uint8Array(Array.prototype.slice.call(d,0)),c=d=>d.replace(/[^A-Za-z0-9\+\/]/g,""),X=d=>{let l,m,Z,b,i="";const c=d.length%3;for(let c=0;c<d.length;){if((m=d.charCodeAt(c++))>255||(Z=d.charCodeAt(c++))>255||(b=d.charCodeAt(c++))>255)throw new TypeError("invalid character found");l=m<<16|Z<<8|b,i+=I[l>>18&63]+I[l>>12&63]+I[l>>6&63]+I[63&l]}return c?i.slice(0,c-3)+"===".substring(c):i},y=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,C=d=>{switch(d.length){case 4:var l=((7&d.charCodeAt(0))<<18|(63&d.charCodeAt(1))<<12|(63&d.charCodeAt(2))<<6|63&d.charCodeAt(3))-65536;return b(55296+(l>>>10))+b(56320+(1023&l));case 3:return b((15&d.charCodeAt(0))<<12|(63&d.charCodeAt(1))<<6|63&d.charCodeAt(2));default:return b((31&d.charCodeAt(0))<<6|63&d.charCodeAt(1))}},K=d=>d.replace(y,C),G=d=>{if(d=d.replace(/\s+/g,""),!Z.test(d))throw new TypeError("malformed base64.");d+="==".slice(2-(3&d.length));let l,I,i,c="";for(let Z=0;Z<d.length;)l=m[d.charAt(Z++)]<<18|m[d.charAt(Z++)]<<12|(I=m[d.charAt(Z++)])<<6|(i=m[d.charAt(Z++)]),c+=64===I?b(l>>16&255):64===i?b(l>>16&255,l>>8&255):b(l>>16&255,l>>8&255,255&l);return c},W="function"==typeof atob?d=>atob(c(d)):d?d=>Buffer.from(d,"base64").toString("binary"):G,p=d?d=>i(Buffer.from(d,"base64")):d=>i(W(d).split("").map((d=>d.charCodeAt(0)))),h=d?d=>Buffer.from(d,"base64").toString("utf8"):l?d=>l.decode(p(d)):d=>K(W(d)),V=d=>c(d.replace(/[-_]/g,(d=>"-"==d?"+":"/"))),o=d=>h(V(d)),u=o;var g={};!function(d){var l=Object.prototype.hasOwnProperty,I="~";function m(){}function Z(d,l,I){this.fn=d,this.context=l,this.once=I||!1}function b(d,l,m,b,i){if("function"!=typeof m)throw new TypeError("The listener must be a function");var c=new Z(m,b||d,i),X=I?I+l:l;return d._events[X]?d._events[X].fn?d._events[X]=[d._events[X],c]:d._events[X].push(c):(d._events[X]=c,d._eventsCount++),d}function i(d,l){0==--d._eventsCount?d._events=new m:delete d._events[l]}function c(){this._events=new m,this._eventsCount=0}Object.create&&(m.prototype=Object.create(null),(new m).__proto__||(I=!1)),c.prototype.eventNames=function(){var d,m,Z=[];if(0===this._eventsCount)return Z;for(m in d=this._events)l.call(d,m)&&Z.push(I?m.slice(1):m);return Object.getOwnPropertySymbols?Z.concat(Object.getOwnPropertySymbols(d)):Z},c.prototype.listeners=function(d){var l=I?I+d:d,m=this._events[l];if(!m)return[];if(m.fn)return[m.fn];for(var Z=0,b=m.length,i=new Array(b);Z<b;Z++)i[Z]=m[Z].fn;return i},c.prototype.listenerCount=function(d){var l=I?I+d:d,m=this._events[l];return m?m.fn?1:m.length:0},c.prototype.emit=function(d,l,m,Z,b,i){var c=I?I+d:d;if(!this._events[c])return!1;var X,y,C=this._events[c],K=arguments.length;if(C.fn){switch(C.once&&this.removeListener(d,C.fn,void 0,!0),K){case 1:return C.fn.call(C.context),!0;case 2:return C.fn.call(C.context,l),!0;case 3:return C.fn.call(C.context,l,m),!0;case 4:return C.fn.call(C.context,l,m,Z),!0;case 5:return C.fn.call(C.context,l,m,Z,b),!0;case 6:return C.fn.call(C.context,l,m,Z,b,i),!0}for(y=1,X=new Array(K-1);y<K;y++)X[y-1]=arguments[y];C.fn.apply(C.context,X)}else{var G,W=C.length;for(y=0;y<W;y++)switch(C[y].once&&this.removeListener(d,C[y].fn,void 0,!0),K){case 1:C[y].fn.call(C[y].context);break;case 2:C[y].fn.call(C[y].context,l);break;case 3:C[y].fn.call(C[y].context,l,m);break;case 4:C[y].fn.call(C[y].context,l,m,Z);break;default:if(!X)for(G=1,X=new Array(K-1);G<K;G++)X[G-1]=arguments[G];C[y].fn.apply(C[y].context,X)}}return!0},c.prototype.on=function(d,l,I){return b(this,d,l,I,!1)},c.prototype.once=function(d,l,I){return b(this,d,l,I,!0)},c.prototype.removeListener=function(d,l,m,Z){var b=I?I+d:d;if(!this._events[b])return this;if(!l)return i(this,b),this;var c=this._events[b];if(c.fn)c.fn!==l||Z&&!c.once||m&&c.context!==m||i(this,b);else{for(var X=0,y=[],C=c.length;X<C;X++)(c[X].fn!==l||Z&&!c[X].once||m&&c[X].context!==m)&&y.push(c[X]);y.length?this._events[b]=1===y.length?y[0]:y:i(this,b)}return this},c.prototype.removeAllListeners=function(d){var l;return d?(l=I?I+d:d,this._events[l]&&i(this,l)):(this._events=new m,this._eventsCount=0),this},c.prototype.off=c.prototype.removeListener,c.prototype.addListener=c.prototype.on,c.prefixed=I,c.EventEmitter=c,d.exports=c}({get exports(){return g},set exports(d){g=d}});var Y=g;let n;!function(){if("browser"!==("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;let d=u("");function l(){let l=new Y;let I=function(d){try{let l=new Blob([d]),I=window.URL||window.webkitURL;return new Worker(I.createObjectURL(l))}catch(d){Z(d)}}(d);if(!I)return Z("invalid worker"),null;function m(){let d=function(){let d,l,I=new Promise((function(){d=arguments[0],l=arguments[1]}));return I.resolve=d,I.reject=l,I}(),m=function(){let d=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,l=[],I="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),m=I.length;for(let Z=0;Z<d;Z++)l[Z]=I[0|Math.random()*m];return l.join("")}(),Z={mode:"call",id:m,fun:"main",input:[...arguments]};return I.postMessage(Z),l.once(m,(l=>{"success"===l.state?d.resolve(l.msg):d.reject(l.msg)})),d}function Z(d){l.emit("error",d)}return I.onmessage=function(d){!function(d){let I=d,m=I.mode;"emit"!==m&&"return"!==m||("emit"===m&&l.emit(I.evName,I.msg),"return"===m&&l.emit(I.id,I))}(d.data)},I.onerror=Z,I.onmessageerror=function(d){Z(d.data)},function(){let d={mode:"init",type:"function",input:[...arguments]};I.postMessage(d)}([...arguments]),l.main=m,l.main=m,l.terminate=function(){I?(I.terminate(),I=void 0):Z("worker has been terminated")},l}n=async function(){let d=[...arguments],I=l();return await I.main(...d).finally((()=>{I.terminate()}))}}();try{process.on("unhandledRejection",(d=>{console.log("outer:unhandledRejection",d)})),process.on("uncaughtException",(d=>{console.log("outer:uncaughtException",d)})),process.on("uncaughtExceptionMonitor",(d=>{console.log("outer:uncaughtExceptionMonitor",d)}))}catch(d){}var t=n;export{t as default};
