const d="function"==typeof atob,m="function"==typeof Buffer,l="function"==typeof TextDecoder?new TextDecoder:void 0,Z=("function"==typeof TextEncoder&&new TextEncoder,Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")),I=(d=>{let m={};return Z.forEach(((d,l)=>m[d]=l)),m})(),b=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,X=String.fromCharCode.bind(String),i="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):d=>new Uint8Array(Array.prototype.slice.call(d,0)),c=d=>d.replace(/[^A-Za-z0-9\+\/]/g,""),y=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,W=d=>{switch(d.length){case 4:var m=((7&d.charCodeAt(0))<<18|(63&d.charCodeAt(1))<<12|(63&d.charCodeAt(2))<<6|63&d.charCodeAt(3))-65536;return X(55296+(m>>>10))+X(56320+(1023&m));case 3:return X((15&d.charCodeAt(0))<<12|(63&d.charCodeAt(1))<<6|63&d.charCodeAt(2));default:return X((31&d.charCodeAt(0))<<6|63&d.charCodeAt(1))}},p=d=>d.replace(y,W),V=d=>{if(d=d.replace(/\s+/g,""),!b.test(d))throw new TypeError("malformed base64.");d+="==".slice(2-(3&d.length));let m,l,Z,i="";for(let b=0;b<d.length;)m=I[d.charAt(b++)]<<18|I[d.charAt(b++)]<<12|(l=I[d.charAt(b++)])<<6|(Z=I[d.charAt(b++)]),i+=64===l?X(m>>16&255):64===Z?X(m>>16&255,m>>8&255):X(m>>16&255,m>>8&255,255&m);return i},G=d?d=>atob(c(d)):m?d=>Buffer.from(d,"base64").toString("binary"):V,Y=m?d=>i(Buffer.from(d,"base64")):d=>i(G(d).split("").map((d=>d.charCodeAt(0)))),K=m?d=>Buffer.from(d,"base64").toString("utf8"):l?d=>l.decode(Y(d)):d=>p(G(d)),C=d=>c(d.replace(/[-_]/g,(d=>"-"==d?"+":"/"))),H=d=>K(C(d)),h=H;var u={};!function(d){var m=Object.prototype.hasOwnProperty,l="~";function Z(){}function I(d,m,l){this.fn=d,this.context=m,this.once=l||!1}function b(d,m,Z,b,X){if("function"!=typeof Z)throw new TypeError("The listener must be a function");var i=new I(Z,b||d,X),c=l?l+m:m;return d._events[c]?d._events[c].fn?d._events[c]=[d._events[c],i]:d._events[c].push(i):(d._events[c]=i,d._eventsCount++),d}function X(d,m){0==--d._eventsCount?d._events=new Z:delete d._events[m]}function i(){this._events=new Z,this._eventsCount=0}Object.create&&(Z.prototype=Object.create(null),(new Z).__proto__||(l=!1)),i.prototype.eventNames=function(){var d,Z,I=[];if(0===this._eventsCount)return I;for(Z in d=this._events)m.call(d,Z)&&I.push(l?Z.slice(1):Z);return Object.getOwnPropertySymbols?I.concat(Object.getOwnPropertySymbols(d)):I},i.prototype.listeners=function(d){var m=l?l+d:d,Z=this._events[m];if(!Z)return[];if(Z.fn)return[Z.fn];for(var I=0,b=Z.length,X=new Array(b);I<b;I++)X[I]=Z[I].fn;return X},i.prototype.listenerCount=function(d){var m=l?l+d:d,Z=this._events[m];return Z?Z.fn?1:Z.length:0},i.prototype.emit=function(d,m,Z,I,b,X){var i=l?l+d:d;if(!this._events[i])return!1;var c,y,W=this._events[i],p=arguments.length;if(W.fn){switch(W.once&&this.removeListener(d,W.fn,void 0,!0),p){case 1:return W.fn.call(W.context),!0;case 2:return W.fn.call(W.context,m),!0;case 3:return W.fn.call(W.context,m,Z),!0;case 4:return W.fn.call(W.context,m,Z,I),!0;case 5:return W.fn.call(W.context,m,Z,I,b),!0;case 6:return W.fn.call(W.context,m,Z,I,b,X),!0}for(y=1,c=new Array(p-1);y<p;y++)c[y-1]=arguments[y];W.fn.apply(W.context,c)}else{var V,G=W.length;for(y=0;y<G;y++)switch(W[y].once&&this.removeListener(d,W[y].fn,void 0,!0),p){case 1:W[y].fn.call(W[y].context);break;case 2:W[y].fn.call(W[y].context,m);break;case 3:W[y].fn.call(W[y].context,m,Z);break;case 4:W[y].fn.call(W[y].context,m,Z,I);break;default:if(!c)for(V=1,c=new Array(p-1);V<p;V++)c[V-1]=arguments[V];W[y].fn.apply(W[y].context,c)}}return!0},i.prototype.on=function(d,m,l){return b(this,d,m,l,!1)},i.prototype.once=function(d,m,l){return b(this,d,m,l,!0)},i.prototype.removeListener=function(d,m,Z,I){var b=l?l+d:d;if(!this._events[b])return this;if(!m)return X(this,b),this;var i=this._events[b];if(i.fn)i.fn!==m||I&&!i.once||Z&&i.context!==Z||X(this,b);else{for(var c=0,y=[],W=i.length;c<W;c++)(i[c].fn!==m||I&&!i[c].once||Z&&i[c].context!==Z)&&y.push(i[c]);y.length?this._events[b]=1===y.length?y[0]:y:X(this,b)}return this},i.prototype.removeAllListeners=function(d){var m;return d?(m=l?l+d:d,this._events[m]&&X(this,m)):(this._events=new Z,this._eventsCount=0),this},i.prototype.off=i.prototype.removeListener,i.prototype.addListener=i.prototype.on,i.prefixed=l,i.EventEmitter=i,d.exports=i}({get exports(){return u},set exports(d){u=d}});var t=u;let J;!function(){if("browser"!==("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;let d=h("");function m(){let m=new t;let l=function(d){try{let m=new Blob([d]),l=window.URL||window.webkitURL;return new Worker(l.createObjectURL(m))}catch(d){I(d)}}(d);if(!l)return I("invalid worker"),null;function Z(){let d=function(){let d,m,l=new Promise((function(){d=arguments[0],m=arguments[1]}));return l.resolve=d,l.reject=m,l}(),Z=function(){let d=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,m=[],l="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),Z=l.length;for(let I=0;I<d;I++)m[I]=l[0|Math.random()*Z];return m.join("")}(),I={mode:"call",id:Z,fun:"main",input:[...arguments]};return l.postMessage(I),m.once(Z,(m=>{"success"===m.state?d.resolve(m.msg):d.reject(m.msg)})),d}function I(d){m.emit("error",d)}return l.onmessage=function(d){!function(d){let l=d,Z=l.mode;"emit"!==Z&&"return"!==Z||("emit"===Z&&m.emit(l.evName,l.msg),"return"===Z&&m.emit(l.id,l))}(d.data)},l.onerror=I,function(){let d={mode:"init",type:"function",input:[...arguments]};l.postMessage(d)}([...arguments]),m.main=Z,m.main=Z,m.terminate=function(){l?(l.terminate(),l=void 0):I("worker has been terminated")},m}J=async function(){let d=[...arguments],l=m();return await l.main(...d).finally((()=>{l.terminate()}))}}();var s=J;export{s as default};
