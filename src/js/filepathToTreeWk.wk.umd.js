const d="function"==typeof atob,Z="function"==typeof Buffer,m="function"==typeof TextDecoder?new TextDecoder:void 0,l=("function"==typeof TextEncoder&&new TextEncoder,Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")),b=(d=>{let Z={};return l.forEach(((d,m)=>Z[d]=m)),Z})(),I=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,i=String.fromCharCode.bind(String),X="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):d=>new Uint8Array(Array.prototype.slice.call(d,0)),c=d=>d.replace(/[^A-Za-z0-9\+\/]/g,""),W=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,y=d=>{switch(d.length){case 4:var Z=((7&d.charCodeAt(0))<<18|(63&d.charCodeAt(1))<<12|(63&d.charCodeAt(2))<<6|63&d.charCodeAt(3))-65536;return i(55296+(Z>>>10))+i(56320+(1023&Z));case 3:return i((15&d.charCodeAt(0))<<12|(63&d.charCodeAt(1))<<6|63&d.charCodeAt(2));default:return i((31&d.charCodeAt(0))<<6|63&d.charCodeAt(1))}},p=d=>d.replace(W,y),K=d=>{if(d=d.replace(/\s+/g,""),!I.test(d))throw new TypeError("malformed base64.");d+="==".slice(2-(3&d.length));let Z,m,l,X="";for(let I=0;I<d.length;)Z=b[d.charAt(I++)]<<18|b[d.charAt(I++)]<<12|(m=b[d.charAt(I++)])<<6|(l=b[d.charAt(I++)]),X+=64===m?i(Z>>16&255):64===l?i(Z>>16&255,Z>>8&255):i(Z>>16&255,Z>>8&255,255&Z);return X},Y=d?d=>atob(c(d)):Z?d=>Buffer.from(d,"base64").toString("binary"):K,H=Z?d=>X(Buffer.from(d,"base64")):d=>X(Y(d).split("").map((d=>d.charCodeAt(0)))),G=Z?d=>Buffer.from(d,"base64").toString("utf8"):m?d=>m.decode(H(d)):d=>p(Y(d)),h=d=>c(d.replace(/[-_]/g,(d=>"-"==d?"+":"/"))),C=d=>G(h(d)),V=C;var u={};!function(d){var Z=Object.prototype.hasOwnProperty,m="~";function l(){}function b(d,Z,m){this.fn=d,this.context=Z,this.once=m||!1}function I(d,Z,l,I,i){if("function"!=typeof l)throw new TypeError("The listener must be a function");var X=new b(l,I||d,i),c=m?m+Z:Z;return d._events[c]?d._events[c].fn?d._events[c]=[d._events[c],X]:d._events[c].push(X):(d._events[c]=X,d._eventsCount++),d}function i(d,Z){0==--d._eventsCount?d._events=new l:delete d._events[Z]}function X(){this._events=new l,this._eventsCount=0}Object.create&&(l.prototype=Object.create(null),(new l).__proto__||(m=!1)),X.prototype.eventNames=function(){var d,l,b=[];if(0===this._eventsCount)return b;for(l in d=this._events)Z.call(d,l)&&b.push(m?l.slice(1):l);return Object.getOwnPropertySymbols?b.concat(Object.getOwnPropertySymbols(d)):b},X.prototype.listeners=function(d){var Z=m?m+d:d,l=this._events[Z];if(!l)return[];if(l.fn)return[l.fn];for(var b=0,I=l.length,i=new Array(I);b<I;b++)i[b]=l[b].fn;return i},X.prototype.listenerCount=function(d){var Z=m?m+d:d,l=this._events[Z];return l?l.fn?1:l.length:0},X.prototype.emit=function(d,Z,l,b,I,i){var X=m?m+d:d;if(!this._events[X])return!1;var c,W,y=this._events[X],p=arguments.length;if(y.fn){switch(y.once&&this.removeListener(d,y.fn,void 0,!0),p){case 1:return y.fn.call(y.context),!0;case 2:return y.fn.call(y.context,Z),!0;case 3:return y.fn.call(y.context,Z,l),!0;case 4:return y.fn.call(y.context,Z,l,b),!0;case 5:return y.fn.call(y.context,Z,l,b,I),!0;case 6:return y.fn.call(y.context,Z,l,b,I,i),!0}for(W=1,c=new Array(p-1);W<p;W++)c[W-1]=arguments[W];y.fn.apply(y.context,c)}else{var K,Y=y.length;for(W=0;W<Y;W++)switch(y[W].once&&this.removeListener(d,y[W].fn,void 0,!0),p){case 1:y[W].fn.call(y[W].context);break;case 2:y[W].fn.call(y[W].context,Z);break;case 3:y[W].fn.call(y[W].context,Z,l);break;case 4:y[W].fn.call(y[W].context,Z,l,b);break;default:if(!c)for(K=1,c=new Array(p-1);K<p;K++)c[K-1]=arguments[K];y[W].fn.apply(y[W].context,c)}}return!0},X.prototype.on=function(d,Z,m){return I(this,d,Z,m,!1)},X.prototype.once=function(d,Z,m){return I(this,d,Z,m,!0)},X.prototype.removeListener=function(d,Z,l,b){var I=m?m+d:d;if(!this._events[I])return this;if(!Z)return i(this,I),this;var X=this._events[I];if(X.fn)X.fn!==Z||b&&!X.once||l&&X.context!==l||i(this,I);else{for(var c=0,W=[],y=X.length;c<y;c++)(X[c].fn!==Z||b&&!X[c].once||l&&X[c].context!==l)&&W.push(X[c]);W.length?this._events[I]=1===W.length?W[0]:W:i(this,I)}return this},X.prototype.removeAllListeners=function(d){var Z;return d?(Z=m?m+d:d,this._events[Z]&&i(this,Z)):(this._events=new l,this._eventsCount=0),this},X.prototype.off=X.prototype.removeListener,X.prototype.addListener=X.prototype.on,X.prefixed=m,X.EventEmitter=X,d.exports=X}({get exports(){return u},set exports(d){u=d}});var t=u;let s;!function(){if("browser"!==("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;let d=V("");function Z(){let Z=new t;let m=function(d){try{let Z=new Blob([d]),m=window.URL||window.webkitURL;return new Worker(m.createObjectURL(Z))}catch(d){b(d)}}(d);if(!m)return b("invalid worker"),null;function l(){let d=function(){let d,Z,m=new Promise((function(){d=arguments[0],Z=arguments[1]}));return m.resolve=d,m.reject=Z,m}(),l=function(){let d=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,Z=[],m="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),l=m.length;for(let b=0;b<d;b++)Z[b]=m[0|Math.random()*l];return Z.join("")}(),b={mode:"call",id:l,fun:"main",input:[...arguments]};return m.postMessage(b),Z.once(l,(Z=>{"success"===Z.state?d.resolve(Z.msg):d.reject(Z.msg)})),d}function b(d){Z.emit("error",d)}return m.onmessage=function(d){!function(d){let m=d,l=m.mode;"emit"!==l&&"return"!==l||("emit"===l&&Z.emit(m.evName,m.msg),"return"===l&&Z.emit(m.id,m))}(d.data)},m.onerror=b,function(){let d={mode:"init",type:"function",input:[...arguments]};m.postMessage(d)}([...arguments]),Z.main=l,Z.main=l,Z.terminate=function(){m?(m.terminate(),m=void 0):b("worker has been terminated")},Z}s=async function(){let d=[...arguments],m=Z();return await m.main(...d).finally((()=>{m.terminate()}))}}();var J=s;export{J as default};
