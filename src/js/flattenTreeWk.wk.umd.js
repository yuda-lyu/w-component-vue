const I="function"==typeof Buffer,l="function"==typeof TextDecoder?new TextDecoder:void 0,d=("function"==typeof TextEncoder&&new TextEncoder,Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=")),c=(I=>{let l={};return d.forEach(((I,d)=>l[I]=d)),l})(),i=/^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/,Z=String.fromCharCode.bind(String),m="function"==typeof Uint8Array.from?Uint8Array.from.bind(Uint8Array):I=>new Uint8Array(Array.prototype.slice.call(I,0)),X=I=>I.replace(/[^A-Za-z0-9\+\/]/g,""),b=I=>{let l,c,i,Z,m="";const X=I.length%3;for(let X=0;X<I.length;){if((c=I.charCodeAt(X++))>255||(i=I.charCodeAt(X++))>255||(Z=I.charCodeAt(X++))>255)throw new TypeError("invalid character found");l=c<<16|i<<8|Z,m+=d[l>>18&63]+d[l>>12&63]+d[l>>6&63]+d[63&l]}return X?m.slice(0,X-3)+"===".substring(X):m},C=/[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g,y=I=>{switch(I.length){case 4:var l=((7&I.charCodeAt(0))<<18|(63&I.charCodeAt(1))<<12|(63&I.charCodeAt(2))<<6|63&I.charCodeAt(3))-65536;return Z(55296+(l>>>10))+Z(56320+(1023&l));case 3:return Z((15&I.charCodeAt(0))<<12|(63&I.charCodeAt(1))<<6|63&I.charCodeAt(2));default:return Z((31&I.charCodeAt(0))<<6|63&I.charCodeAt(1))}},g=I=>I.replace(C,y),n=I=>{if(I=I.replace(/\s+/g,""),!i.test(I))throw new TypeError("malformed base64.");I+="==".slice(2-(3&I.length));let l,d,m,X="";for(let i=0;i<I.length;)l=c[I.charAt(i++)]<<18|c[I.charAt(i++)]<<12|(d=c[I.charAt(i++)])<<6|(m=c[I.charAt(i++)]),X+=64===d?Z(l>>16&255):64===m?Z(l>>16&255,l>>8&255):Z(l>>16&255,l>>8&255,255&l);return X},t="function"==typeof atob?I=>atob(X(I)):I?I=>Buffer.from(I,"base64").toString("binary"):n,o=I?I=>m(Buffer.from(I,"base64")):I=>m(t(I).split("").map((I=>I.charCodeAt(0)))),W=I?I=>Buffer.from(I,"base64").toString("utf8"):l?I=>l.decode(o(I)):I=>g(t(I)),G=I=>X(I.replace(/[-_]/g,(I=>"-"==I?"+":"/"))),K=I=>W(G(I)),u=K;var p={};!function(I){var l=Object.prototype.hasOwnProperty,d="~";function c(){}function i(I,l,d){this.fn=I,this.context=l,this.once=d||!1}function Z(I,l,c,Z,m){if("function"!=typeof c)throw new TypeError("The listener must be a function");var X=new i(c,Z||I,m),b=d?d+l:l;return I._events[b]?I._events[b].fn?I._events[b]=[I._events[b],X]:I._events[b].push(X):(I._events[b]=X,I._eventsCount++),I}function m(I,l){0==--I._eventsCount?I._events=new c:delete I._events[l]}function X(){this._events=new c,this._eventsCount=0}Object.create&&(c.prototype=Object.create(null),(new c).__proto__||(d=!1)),X.prototype.eventNames=function(){var I,c,i=[];if(0===this._eventsCount)return i;for(c in I=this._events)l.call(I,c)&&i.push(d?c.slice(1):c);return Object.getOwnPropertySymbols?i.concat(Object.getOwnPropertySymbols(I)):i},X.prototype.listeners=function(I){var l=d?d+I:I,c=this._events[l];if(!c)return[];if(c.fn)return[c.fn];for(var i=0,Z=c.length,m=new Array(Z);i<Z;i++)m[i]=c[i].fn;return m},X.prototype.listenerCount=function(I){var l=d?d+I:I,c=this._events[l];return c?c.fn?1:c.length:0},X.prototype.emit=function(I,l,c,i,Z,m){var X=d?d+I:I;if(!this._events[X])return!1;var b,C,y=this._events[X],g=arguments.length;if(y.fn){switch(y.once&&this.removeListener(I,y.fn,void 0,!0),g){case 1:return y.fn.call(y.context),!0;case 2:return y.fn.call(y.context,l),!0;case 3:return y.fn.call(y.context,l,c),!0;case 4:return y.fn.call(y.context,l,c,i),!0;case 5:return y.fn.call(y.context,l,c,i,Z),!0;case 6:return y.fn.call(y.context,l,c,i,Z,m),!0}for(C=1,b=new Array(g-1);C<g;C++)b[C-1]=arguments[C];y.fn.apply(y.context,b)}else{var n,t=y.length;for(C=0;C<t;C++)switch(y[C].once&&this.removeListener(I,y[C].fn,void 0,!0),g){case 1:y[C].fn.call(y[C].context);break;case 2:y[C].fn.call(y[C].context,l);break;case 3:y[C].fn.call(y[C].context,l,c);break;case 4:y[C].fn.call(y[C].context,l,c,i);break;default:if(!b)for(n=1,b=new Array(g-1);n<g;n++)b[n-1]=arguments[n];y[C].fn.apply(y[C].context,b)}}return!0},X.prototype.on=function(I,l,d){return Z(this,I,l,d,!1)},X.prototype.once=function(I,l,d){return Z(this,I,l,d,!0)},X.prototype.removeListener=function(I,l,c,i){var Z=d?d+I:I;if(!this._events[Z])return this;if(!l)return m(this,Z),this;var X=this._events[Z];if(X.fn)X.fn!==l||i&&!X.once||c&&X.context!==c||m(this,Z);else{for(var b=0,C=[],y=X.length;b<y;b++)(X[b].fn!==l||i&&!X[b].once||c&&X[b].context!==c)&&C.push(X[b]);C.length?this._events[Z]=1===C.length?C[0]:C:m(this,Z)}return this},X.prototype.removeAllListeners=function(I){var l;return I?(l=d?d+I:I,this._events[l]&&m(this,l)):(this._events=new c,this._eventsCount=0),this},X.prototype.off=X.prototype.removeListener,X.prototype.addListener=X.prototype.on,X.prefixed=d,X.EventEmitter=X,I.exports=X}({get exports(){return p},set exports(I){p=I}});var e=p;let J;!function(){if("browser"!==("undefined"!=typeof window&&void 0!==window.document?"browser":"nodejs"))return null;let I=u("");function l(){let l=new e;let d=function(I){try{let l=new Blob([I]),d=window.URL||window.webkitURL;return new Worker(d.createObjectURL(l))}catch(I){i(I)}}(I);if(!d)return i("invalid worker"),null;function c(){let I=function(){let I,l,d=new Promise((function(){I=arguments[0],l=arguments[1]}));return d.resolve=I,d.reject=l,d}(),c=function(){let I=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,l=[],d="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),c=d.length;for(let i=0;i<I;i++)l[i]=d[0|Math.random()*c];return l.join("")}(),i={mode:"call",id:c,fun:"main",input:[...arguments]};return d.postMessage(i),l.once(c,(l=>{"success"===l.state?I.resolve(l.msg):I.reject(l.msg)})),I}function i(I){l.emit("error",I)}return d.onmessage=function(I){!function(I){let d=I,c=d.mode;"emit"!==c&&"return"!==c||("emit"===c&&l.emit(d.evName,d.msg),"return"===c&&l.emit(d.id,d))}(I.data)},d.onerror=i,d.onmessageerror=function(I){i(I.data)},function(){let I={mode:"init",type:"function",input:[...arguments]};d.postMessage(I)}([...arguments]),l.main=c,l.main=c,l.terminate=function(){d?(d.terminate(),d=void 0):i("worker has been terminated")},l}J=async function(){let I=[...arguments],d=l();return await d.main(...I).finally((()=>{d.terminate()}))}}();try{process.on("unhandledRejection",(I=>{console.log("outer:unhandledRejection",I)})),process.on("uncaughtException",(I=>{console.log("outer:uncaughtException",I)})),process.on("uncaughtExceptionMonitor",(I=>{console.log("outer:uncaughtExceptionMonitor",I)}))}catch(I){}var V=J;export{V as default};
